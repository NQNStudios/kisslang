// (defvar) declares static variables
(defvar message "Howdy")

// #| ... |# parses and injects raw Haxe code
(defvar mathResult #|5 + 6 * 3|#) // Order of operations will apply

// (defun) declares static functions
(defun myFloor [num] 
    // funcalls can use dot access
    (Math.floor num))

// functions are resolved in the macro context
(defvar funResult (myFloor 7.5))

// (defprop) declares instance variables
(defprop myField 5)

// (defmethod) declares instance methods
(defmethod myMethod [] this.myField)

// [...] returns a Kiss array (they have special features and convert implicitly)
(defvar myArray [1 2 3])

// Variadic math uses haxe's Lambda.fold under the hood
(defvar mySum (+ 1 2 3))

(defvar myDifference (- 5 4 3))

(defvar myProduct (* 2 5 6))

(defvar myQuotient (/ 6 3 2 2))

(defvar myRemainder (% 10 6))

(defvar myPower (^ 2 8))