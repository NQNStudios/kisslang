// Functions for parsing and modifying ktxt2 files.

// ktxt2 files contain an original "SOURCE" file and a translated "OUTPUT" file
// which is authored semi-automatically with the help of a custom VSCode editor.
// A file called README.md.html.ktxt2 would be for converting README.md -> README.html.

(var blockStartEnd "|||")
(var unlockedStart "|>|")
(var lockedStart "|!|")
(var outputStarts [unlockedStart lockedStart])
(var emptyBlock "${blockStartEnd}${unlockedStart}${blockStartEnd}")

(function :String outputBlockTerminator [:Stream fileStream]
    (whenLet [(Some terminator) (fileStream.takeUntilOneOf [blockStartEnd] true)]
        terminator))

(function :Array<KTxt2Element> splitFileElements [:Stream fileStream]
    (let [elements []]
        (loop
            (let [start
                        (fileStream.position)
                    block
                        (object
                            source ""
                            sourceStart null
                            sourceEnd null
                            output ""
                            outputStart null 
                            outputEnd null
                            outputLocked false)]
                // Look for the start of a KTxt2 block
                (case (fileStream.takeUntilOneOf [blockStartEnd] true)
                    ((Some comment)
                        // Anything before the start of the block used to be considered a comment
                        /*(when comment
                            (let [end (fileStream.position)]
                                (elements.push (Comment (object text comment start start end end)))))*/
                        (fileStream.dropChars blockStartEnd.length)
                        (when (fileStream.isEmpty) (break))
                        (let [sourceStartPosition .absoluteChar (fileStream.position)
                                sourceBlock (fileStream.expect "A chunk of source text followed by one of $outputStarts"
                                                ->(fileStream.takeUntilOneOf outputStarts))
                                sourceEndPosition .absoluteChar (fileStream.position)]
                            (set block.source sourceBlock)
                            (set block.sourceStart sourceStartPosition)
                            (set block.sourceEnd sourceEndPosition))
                        (assert (apply = (for outputStart outputStarts outputStart.length)) "all output starts must be the same length!")
                        (set block.outputLocked
                            (case (fileStream.expect "One of $outputStarts" ->(fileStream.takeChars .length (first outputStarts)))
                                (lockedStart true)
                                (unlockedStart false)
                                (otherwise
                                    (throw "Expected one of $outputStarts"))))
                        (let [outputStartPosition .absoluteChar (fileStream.position)
                                outputBlock (fileStream.expect "A chunk of output text followed by $blockStartEnd"
                                                ->(fileStream.takeUntilOneOf [blockStartEnd]))
                                outputEndPosition .absoluteChar (fileStream.position)]
                            (fileStream.dropChars blockStartEnd.length)
                            (set block.output outputBlock)
                            (set block.outputStart outputStartPosition)
                            (set block.outputEnd outputEndPosition)))
                    (otherwise
                        (break)))
                (elements.push (Block block))))
            elements))

(function :String toString [:Array<KTxt2Element> elements]
    (apply +
        (for element elements
            (assertLet [(Block (objectWith source outputLocked output)) element]
                "${blockStartEnd}${source}$(if outputLocked lockedStart unlockedStart)${output}${blockStartEnd}"))))

// To save window space after each block editor, ¶ can be used in place of \n\n
// and ↵ in place of \n
(function :String applySpecialChars [:String text]
    (.replace
        (text.replace "¶" "\n\n")
        "↵" "\n"))

// Return [sourceFile outputFile]
(function :Array<String> extractFileContents [:Stream fileStream :String->Dynamic reportError]
    (let [&mut sourceText ""
            &mut outputText ""
            interp (new KissInterp)]
        (set interp.cacheConvertedHScript true)
        (doFor ktxtElement (splitFileElements fileStream)
            (case ktxtElement
                ((Block (objectWith source output))
                    (set source (applySpecialChars source))
                    (+= sourceText source)
                    (dictSet interp.variables "source" source)
                    (dictSet interp.variables "sourceLine" ->line (nth (source.split "\n") line))
                    (dictSet interp.variables "R" re_flex.R)
                    (+= outputText
                        // Don't run the expensive "evalKiss" if there is no interpolation in the block!
                        (if (= -1 (output.indexOf "\$"))
                                output
                            (try (interp.evalKiss "\"${output}\"")
                                (catch [error] (reportError "Export templating error $error") (throw error))))))
                (otherwise)))
        (.map [sourceText outputText] applySpecialChars)))

(function :Map<String,String> validConversions [:Array<KTxt2Conversion> conversions :String sourceFile :String outputFile :String source :String->Dynamic reportError]
    (let [validMap (new Map)]
        (doFor c conversions
            (case c
                ((when (and
                            (= sourceType (sourceFile.extension))
                            (= outputType (outputFile.extension))
                            (canConvert (applySpecialChars source)))
                        (objectWith sourceType outputType canConvert convert name))
                    (dictSet validMap name
                            (try (KTxt2.insertSpecialChars
                                    (convert (KTxt2.applySpecialChars source)))
                                (catch [e] (reportError "Conversion error: $e")))))
                (otherwise {})))
        validMap))

(#when (or sys hxnodejs)
    (function :String tryFullAutoConvert [:String ktxt2File :Array<KTxt2Conversion> conversions :String->Dynamic reportError]
        (let [elements (splitFileElements (Stream.fromFile ktxt2File))
                [base sourceExt outputExt _] (ktxt2File.split ".")]
            (doFor element elements
                (assertLet [(Block element) element]
                    (unless element.outputLocked
                        (let [conversions (validConversions conversions "${base}.${sourceExt}" "${base}.${outputExt}" element.source reportError)]
                            (when (= 1 (count conversions))
                                (let [onlyConversion (first (collect (conversions.iterator)))]
                                    (set element.output onlyConversion)))))))
            (toString elements))))

(function :String insertSpecialChars [:String text]
	(let [text (text.replace "\r" "")]
		(cond 
			((text.endsWith "\n\n")
				(+ (substr text 0 -2) "¶"))
			((text.endsWith "\n")
				(+ (substr text 0 -1) "↵"))
			(true
				text))))

// Apply special chars in the middle of a block, and insert them at the end
(function :String normalizeSpecialChars [:String text]
    (insertSpecialChars (applySpecialChars text)))