(function link [from to :Map<String,Array<String>> m]
    (unless (m.exists from)
        (dictSet m from []))
    (.push (dictGet m from) to))

(function pathsMap [file]
    (let [:Map<String,Array<String>> m (new Map)]
        (doFor line (Util.readLines file)
            (let [[from to] (line.split "-")]
                (link from to m)
                (link to from m)))
        m))

(function :Array<kiss.List<String>> allPaths [start end file &opt part2]
    (let [pMap (pathsMap file)
            &mut :Array<kiss.List<String>> paths [[start]]
            &mut :Array<Map<String,Bool>> pathsVisited []
            &mut :Array<Bool> pathsDoubleVisited [false]
            :Array<kiss.List<String>> finishedPaths []]
        (let [pathVisited (new Map)]
            (dictSet pathVisited start true)
            (pathsVisited.push pathVisited))
        (while paths
            (let [:Array<kiss.List<String>> nextPaths []
                    :Array<Map<String,Bool>> nextPathsVisited []
                    :kiss.List<Bool> nextPathsDoubleVisited []]
                (while paths
                    (let [path (paths.pop)
                            pathVisited (pathsVisited.pop)
                            pathDoubleVisited (pathsDoubleVisited.pop)
                            position (last path)]
                        (when (= end position) 
                            (finishedPaths.push path)
                            (continue))
                        (doFor nextPosition (dictGet pMap position)
                            (let [alreadyVisited (dictGet pathVisited nextPosition)]
                                (when (or !alreadyVisited (and part2 !pathDoubleVisited !(= nextPosition start)))
                                    (nextPathsDoubleVisited.push pathDoubleVisited)
                                    (when alreadyVisited (setNth nextPathsDoubleVisited -1 alreadyVisited))
                                    (nextPaths.push (concat (path.copy) [nextPosition]))
                                    (let [nextPathVisited (pathVisited.copy)]
                                        (when (nextPosition.isLowerCase)
                                            (dictSet nextPathVisited nextPosition true))
                                        (nextPathsVisited.push nextPathVisited)))))))
                (set paths nextPaths)
                (set pathsVisited nextPathsVisited)
                (set pathsDoubleVisited nextPathsDoubleVisited)))
        finishedPaths))