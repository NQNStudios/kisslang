(load "../UtilMacros.kiss")

(defMacro dictInc [theMap key amount]
    `(let [&mut theMap ,theMap key ,key amount ,amount &mut count (dictGet theMap key)]
        (unless count
            (dictSet theMap key (set count 0i64)))
        (dictSet theMap key #{count + amount;}#)))

// Remove and return an arbitrary key-value pair from the given Map
(function :Array<Dynamic> dictShift [:Map<String,Dynamic> m]
    (let [key (.next (m.keys))
            val (dictGet m key)]
        (m.remove key)
        [key val]))

(function run []
    (day 1
        (load "day1.kiss")
        (assert (= 1475 (countIncreases (Util.readInts "src/year2021/inputs/day1.txt"))))
        (assert (= 1516 (countIncreases (for trio (slicesOf (Util.readInts "src/year2021/inputs/day1.txt") 3) (apply + trio))))))
    (day 2
        (load "day2.kiss")
        (assert (= 2150351 (apply * (simulateSubCommands (readSubCommands "src/year2021/inputs/day2.txt")))))
        (assert (= 1842742223 (apply * (simulateSubCommands (readSubCommands "src/year2021/inputs/day2.txt") true)))))
    (day 3
        (load "day3.kiss")
        (let [inputs (Util.readLines "src/year2021/inputs/day3.txt")]
            (assert (= 845186 (* (rate inputs false) (rate inputs true))))
            (assert (= 4636702 (* (otherRate inputs false) (otherRate inputs true))))))
    (day 4
        (load "day4.kiss")
        (assert (= 4512 (winningScore "src/year2021/inputs/day4-example.txt")))
        (assert (= 46920 (winningScore "src/year2021/inputs/day4.txt")))
        (assert (= 1924 (lastWinningScore "src/year2021/inputs/day4-example.txt")))
        (assert (= 12635 (lastWinningScore "src/year2021/inputs/day4.txt"))))
    (day 5
        (load "day5.kiss")
        (assert (= 5 (numHotPositions "src/year2021/inputs/day5-example.txt")))
        (assert (= 7473 (numHotPositions "src/year2021/inputs/day5.txt")))
        (assert (= 12 (numHotPositions "src/year2021/inputs/day5-example.txt" true)))
        (assert (= 24164 (numHotPositions "src/year2021/inputs/day5.txt" true))))
    (day 6
        (load "day6.kiss")
        (assert (= "5934" (countAfter "src/year2021/inputs/day6-example.txt" 80)))
        (assert (= "26984457539" (countAfter "src/year2021/inputs/day6-example.txt" 256)))
        (assert (= "346063" (countAfter "src/year2021/inputs/day6.txt" 80)))
        (assert (= "1572358335990" (countAfter "src/year2021/inputs/day6.txt" 256))))
    (day 7
        (load "day7.kiss")
        (assert (= 2 (bestPosToAlignAt (crabPositions "src/year2021/inputs/day7-example.txt"))))
        (let [positions (crabPositions "src/year2021/inputs/day7.txt")]
            (assert (= 356958 (fuelToAlignAt (bestPosToAlignAt positions) positions)))
            (assert (= 105461913 (fuelToAlignAt (bestPosToAlignAt positions true) positions true)))))
    (dayTodo 8)
    (day 9
        (load "day9.kiss")
        
        // (highlightLowPoints "src/year2021/inputs/day9.txt")
        (let [exampleLowPoints (lowPoints "src/year2021/inputs/day9-example.txt")]
            (assert (= 4 (count exampleLowPoints)))
            (assert (= 9 (count (basinAround (.next (exampleLowPoints.keys)) "src/year2021/inputs/day9-example.txt")))))
        (let [realLowPoints (lowPoints "src/year2021/inputs/day9.txt")
                realBasins (for =>lp _ realLowPoints (basinAround lp "src/year2021/inputs/day9.txt"))
                basinSizes (for b realBasins (count b))]
            (assert (= 480 (apply + (for =>_ height realLowPoints (+ 1 height)))))
            (assert (= 1045660 (apply * (.slice (reverse (sort basinSizes)) 0 3))))))
    (day 10
        (load "day10.kiss")
        (assert (= 462693 (apply + (map (map (Util.readLines "src/year2021/inputs/day10.txt") getLineType) score))))
        (let [completionScores (sort (filter (map (map (Util.readLines "src/year2021/inputs/day10.txt") getLineType) completionScore)))]
            (assert (= 3094671161 (nth completionScores (Math.floor (/ completionScores.length 2)))))))
    (day 11
        (load "day11.kiss")
        (assert (= 35 (flashesAfter 2 "src/year2021/inputs/day11-example.txt")))
        (assert (= 1656 (flashesAfter 100 "src/year2021/inputs/day11-example.txt")))
        (assert (= 1723 (flashesAfter 100 "src/year2021/inputs/day11.txt")))
        ~(firstSimultaneousFlash "src/year2021/inputs/day11.txt"))
    (day 12
        (load "day12.kiss")
        (assert (= 10 .length (allPaths "start" "end" "src/year2021/inputs/day12-example.txt")))
        (assert (= 36 .length (allPaths "start" "end" "src/year2021/inputs/day12-example.txt" true)))
        (assert (= 3421 .length (allPaths "start" "end" "src/year2021/inputs/day12.txt")))
        (assert (= 84870 .length (allPaths "start" "end" "src/year2021/inputs/day12.txt" true))))
    (dayTodo 13)
    (dayTodo 14)
    (dayTodo 15)
    (dayTodo 16)
    (dayTodo 17)
    (dayTodo 18)
    (dayTodo 19)
    (dayTodo 20)
    (dayTodo 21)
    (dayTodo 22)
    (dayTodo 23)
    (dayTodo 24)
    (dayTodo 25))
