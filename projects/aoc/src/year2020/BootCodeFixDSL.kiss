(load "BootCodeCommon.kiss")

(defvar :Map<Int,Bool> instructionsTested (new Map<Int,Bool>))
(defprop &mut forked false)
(defprop &mut forkedAt -1)

(defreadermacro ["jmp" "nop"] [stream]
    (let [inst
                (nextToken stream)
            instSymbol
                (ReaderExp.Symbol inst)
            op
                (begin (stream.dropWhitespace) (ReaderExp.Symbol 
                    (begin (stream.dropWhitespace) (stream.expect "+/-" (lambda [] (stream.takeChars 1))))))
            arg
                (ReaderExp.Symbol (nextToken stream))]
        (stream.dropWhitespace)
        `(cond
            ((or self.forked (instructionsTested.exists self.instructionPointer))
                (print "can't fork again")
                (,instSymbol (,op 0 ,arg) self))
            (true
                (dictSet instructionsTested self.instructionPointer true)
                (self.setBreakPoint)
                (self.fork [
                    (lambda [:Dynamic self]
                        (print self.accumulator)
                        (when ,(ReaderExp.Symbol (Std.string (= inst "nop")))
                            (print (set self.forked true))
                            (set self.forkedAt self.instructionPointer))
                        (jmp (,op 0 ,arg) self))
                    (lambda [:Dynamic self]
                        (print self.accumulator)
                        (when ,(ReaderExp.Symbol (Std.string (= inst "jmp")))
                            (print (set self.forked true))
                            (set self.forkedAt self.instructionPointer))
                        (nop (,op 0 ,arg) self))
                    ])))))

// Define the default reader LAST because default readers tend to break everything
(load "BootCodeDSL.kiss")