(function differences [:kiss.List<Int> ratings]
    (for pair (pairs ratings) (- 0 (apply - pair))))

(function distribution [:kiss.List<Int> numbers]
    (let [:Map<Int,Int> dist (new Map)]
        (doFor num numbers
            (dictSet dist num
                (if (dist.exists num)
                        (+ 1 (dictGet dist num))
                    1)))
        dist))

(function &dynamic arrangementCount [:kiss.List<Int> ratings startingIndex]
    (if (= startingIndex (- ratings.length 1)) 1
        (let [&mut :Int64 sum 0
                startingRating (nth ratings startingIndex)
                potentialNextAdapters (filter
                                            (for i (range (+ 1 startingIndex) (+ 4 startingIndex)) i)
                                            (lambda [index] (and (< index ratings.length) (<= (nth ratings index) (+ 3 startingRating)))))]
            (doFor subCount (map potentialNextAdapters (arrangementCount.bind ratings))
                (set sum (Int64.add sum subCount)))
            sum)))
