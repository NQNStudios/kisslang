(loadFrom "hollywoo" "src/hollywoo/HollywooDSL.kiss")
(loadFrom "hollywoo-flixel" "src/hollywoo_flixel/AssetMacros.kiss")

(defMacroVar subclass true)
(loadFrom "hollywoo" "src/hollywoo/Movie.kiss")

(method newFlxScene [name set time perspective]
    (let [setSprite (new FlxSprite 0 0)]
        (setSprite.loadGraphic (dictGet sets set) false 0 0 true) // Load uniquely so we can draw on sets for specific scenes
        (newScene name (cast (new SceneFlxState setSprite time perspective)))))

// Destroy substates when the movie end is reached:
(cleanup
    (doFor =>name scene scenes
        (.destroy (cast scene SceneFlxState))))

(method newFlxSound [name path &opt :Float volume]
    (set volume (or volume 1))
    (assert (<= 0 volume 1))
    (let [s (FlxG.sound.load path)]
        (set s.volume volume)
        (set s.persist true)
        (newSound name s)))

(method newFlxSong [name path]
    (newSong name path))

(method newFlxVoiceTrack [name wavPath jsonPath]
    (newVoiceTrack name (FlxG.sound.load wavPath) (openfl.utils.Assets.getText jsonPath)))

(method newFlxVoiceTracks [:Array<String> names :Array<String> wavJsonPaths]
    (doFor name names
        (doFor [wavPath jsonPath] (groups wavJsonPaths 2 Throw)
            (newFlxVoiceTrack name wavPath jsonPath))))

(method newFlxProp [name path &opt :FlxSprite->Void prepareSprite]
    (let [propSprite (new FlxSprite 0 0)]
        (propSprite.loadGraphic path false 0 0 true) // Load props uniquely because they can be drawn on
        (when prepareSprite
            (prepareSprite propSprite))
        (newProp name propSprite)))

(defMacro flxSprite [asset &builder b]
    `(new FlxSprite 0 0 ,(b.field (symbolNameValue asset) (b.symbol "AssetPaths"))))

(method :Void update [:Float elapsed]
    (#when debug
        (when FlxG.keys.justPressed.N
            (skipToNextLabel))
        (when FlxG.keys.justPressed.L
            (showLabelSkipButtons))))

(method :Void showLabelSkipButtons []
    (let [runners (labelRunners)
            buttons (new flixel.group.FlxGroup.FlxTypedGroup<flixel.ui.FlxButton>)]
        (localVar &mut buttonY 0)
        (localVar buttonsPerColumn 25)
        (doFor [num label] (enumerate (sort (collect (runners.keys))))
            (let [runner (dictGet runners label)
                    b (new flixel.ui.FlxButton 0 buttonY label ->{(FlxG.state.remove buttons)(runner)})]
                (let [column (Std.int (/ num buttonsPerColumn))]
                    (set b.x (* b.width column)))
                (buttons.add b))
            (+= buttonY 20)
            (when (= (- buttonsPerColumn 1) (% num buttonsPerColumn))
                (set buttonY 0)))
        (.add (cast (_currentScene) SceneFlxState) buttons)))

(defMacro withProp [propKey name &body body]
    `(let [,name (dictGet props ,propKey)]
        ,@body
        (cc)))

// like withProp, but you promise to call CC yourself in the body:
(defMacro withPropCC [propKey name &body body]
    `(let [,name (dictGet props ,propKey)]
        ,@body))
        
(defMacro withActor [actorKey name &body body]
    `(let [,name (dictGet actors ,actorKey)]
        ,@body
        (cc)))

// like withActor, but you promise to call CC yourself in the body:
(defMacro withActorCC [actorKey name &body body]
    `(let [,name (dictGet actors ,actorKey)]
        ,@body))

(defMacro withSet [sceneKey name &body body]
    `(let [,name .setSprite (cast (dictGet scenes ,sceneKey) SceneFlxState)]
        ,@body
        (cc)))

// like withSet, but you promise to call CC yourself in the body:
(defMacro withSetCC [sceneKey name &body body]
    `(let [,name .setSprite (cast (dictGet scenes ,sceneKey) SceneFlxState)]
        ,@body))