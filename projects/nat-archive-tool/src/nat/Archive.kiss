(defNew [&prop :String archiveDir]

    [:Array<System> systems
            []
        :Map<String,Entry> entries
            (let [entryDir (joinPath archiveDir "entries")
                    componentDir (joinPath archiveDir "components")
                    filesDir (joinPath archiveDir "files")]
                (FileSystem.createDirectory entryDir)
                (FileSystem.createDirectory componentDir)
                (FileSystem.createDirectory filesDir)
                (let [entryFiles (FileSystem.readDirectory entryDir)]
                    (for file entryFiles =>(file.withoutExtension) (the Entry (Json.parse (File.getContent (joinPath archiveDir "entries" file)))))))])

(method addSystem [:System system]
    // Assign entries to the Systems that care about them
    (doFor =>id entry entries
        (system.checkEntryInOrOut this entry))
    (systems.push system)
    system)

(method :Entry createEntry [:Entry->Dynamic initializer] // initializer returns Dynamic so ->:Void isn't required
    (let [e (_newEntry)]
        (initializer e)
        (dictSet entries e.id e)
        (refreshEntry e)
        e))

// After modifying an entry, this must be called. If you are writing in a createEntry initializer or a system's processEntry function, this will happen automatically.
// Otherwise, you can guarantee it happens automatically by using the (withWritableEntry) macro in Lib.kiss
(method refreshEntry [:Entry e]
    (_saveEntry e)
    (doFor system systems
        (system.checkEntryInOrOut this e)))

(method _saveEntry [:Entry e]
    (File.saveContent
        (joinPath archiveDir "entries" (e.id.withExtension "json"))
        (Json.stringify e)))

(method componentData [:Entry e :String componentType]
    (haxe.Json.parse (File.getContent (joinPath archiveDir "components" "$(dictGet e.components componentType).json"))))

(method fullData [:Entry e]
    (object
        id e.id
        components
            (for =>type id e.components
                =>type (componentData e type))
        files
            e.files))

(method fullString [:Entry e]
    (haxe.Json.stringify (fullData e) null "\t"))

(function :Entry _newEntry []
    (object
        id (Uuid.v4)
        components (new Map)
        files []))
