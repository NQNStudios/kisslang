(load "../Lib.kiss")

(defNew [&prop :String mediaWikiUrl
            // TODO make a &super annotation that passes an argument to the super constructor
            :EntryChecker canProcess
            :EntryProcessor processor
            &prop :Null<Float> maxLag] 
    (super
        canProcess
        processor))

// TODO make this an externMethod --
// but mediaWikiUrl, headers, and maxLag will still have to be specified, not as args
// unless all vars and props are passed to externmethods by default
(method :Dynamic query [:Map<String,Array<String>> params]
    (Json.parse
        (#extern String python
            (object
                hxmlFile "extern-files/python/args.hxml"
                importHxFile "extern-files/python/import.hx"
                langProjectFile "extern-files/python/requirements.txt")
            [:Map<String,Array<String>> params _ :String mediaWikiUrl _ :String maxLag (if maxLag (Std.string maxLag) "1") :Map<String,String> headers _]
            (let [response
                        (Requests.get mediaWikiUrl 
                            (let [innerParams
                                        [
                                            =>"action" "query"
                                            =>"maxlag" maxLag
                                            =>"format" "json"
                                        ]]
                                (doFor =>param paramValues params (dictSet innerParams param (paramValues.join "|")))
                                innerParams)
                            (object headers headers))]
                (assert response.ok)
                response.text))))

(defmethod queryImageTitles [:Array<String> pageTitles]
    (flatten (for =>_id page (the haxe.DynamicAccess<Dynamic> .pages .query (query [=>"titles" pageTitles =>"prop" ["images"]])) (page.images.map ->image image.title))))

(defmethod queryImageUrls [:Array<String> imageTitles]
    (flatten (for =>_id image (the haxe.DynamicAccess<Dynamic> .pages .query (query [=>"titles" imageTitles =>"prop" ["imageinfo"] =>"iiprop" ["url"]])) (image.imageinfo.map ->image image.url))))

(var headers [=>"User-Agent" "NatArchiveTool/0.0.0 (https://github.com/NQNStudios/kisslang/tree/main/projects/nat-archive-tool; natquaylenelson@gmail.com) Requests/2.26.0"])