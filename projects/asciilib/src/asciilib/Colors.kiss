(defNew [_width _height &opt :Color fillColor]
    [:Int width _width
        :Int height _height
        :Int area (* width height)
        :Bytes red (Bytes.alloc area)
        :Bytes green (Bytes.alloc area)
        :Bytes blue (Bytes.alloc area)]

    (fill (or fillColor Black)))

(method fill [:Color color]
    (red.fill 0 area color.r)
    (green.fill 0 area color.g)
    (blue.fill 0 area color.b))

(method _index [x y]
    (+ x (* y width)))

(defMacro withIndex [idxName xName yName &body body]
    `(let [,idxName (_index ,xName ,yName)]
        ,@body))

(method getPixel [x y]
    (withIndex idx x y
        (object r (red.get idx) g (green.get idx) b (blue.get idx))))

(method setPixel [x y color]
    (withIndex idx x y
        (red.set idx color.r)
        (green.set idx color.g)
        (blue.set idx color.b)))

(function equal [c1 c2]
    (and (= c1.r c2.r) (= c1.g c2.g) (= c1.b c2.b)))

(var Black (object r 0 g 0 b 0))
(var Red (object r 255 g 0 b 0))
(var Green (object r 0 g 255 b 0))
(var Blue (object r 0 g 0 b 255))
(var White (object r 255 g 255 b 255))
