(import
    datetime.DateTime
    datetime.DateTimeInterval
    kiss_spaced_rep.Card
    kiss_spaced_rep.StudyEngine)

(var oneDayInterval (DateTimeInterval.create (DateTime.make 1970 1 1) (DateTime.make 1970 1 2)))
(var halfDayInterval (DateTimeInterval.create (DateTime.make 1970 1 1 0) (DateTime.make 1970 1 1 12)))
(var studyList [])

(function :Void confirmShow [text :StudyEngine engine :Void->Void cc]
    (engine.printCC text cc))

(function :Void basicScore [text :StudyEngine engine :Int->Void resolve]
    (engine.println text)
    (engine.print "Score (0-5): ")
    (engine.input ->:Void str (resolve (Std.parseInt str))))

(function :Void noConfirmShow [text :StudyEngine engine :Void->Void cc]
    (engine.println text)
    (cc))

(function :Void typeScore [text :StudyEngine engine :Int->Void resolve]
    (engine.print "Your answer: ")
    (engine.input ->:Void input
        (cond
            ((= text input)
                (engine.println "Correct!")
                (resolve 5))
            (true
                (engine.println "Wrong! Correct answer was $text")
                (resolve 0)))))

(function :Void clozeShow [index textLines :StudyEngine engine :Void->Void cc]
    (doFor [idx line] (enumerate textLines)
        (engine.println
            (if (= idx index)
                    "????"
                (if (StringTools.startsWith line "?")
                        (line.substr 1)
                    line))))
    (engine.input ->:Void _ (cc)))

(function :Void clozeScore [index :Array<String> textLines :StudyEngine engine :Int->Void resolve]
    (basicScore (.substr (nth textLines index) 1) engine resolve))

(function :CardSide basicText [:String text]
    (object
        show (confirmShow.bind text)
        score (basicScore.bind text)))

(function :CardSide typeText [:String text]
    (object
        show (noConfirmShow.bind text)
        score (typeScore.bind text)))

(function :CardSide image [:String path &opt :String caption]
    (object
        show ->:Void [engine cc] {(when caption (engine.print caption)) (engine.showImageCC path cc)}
    
        score ->:Void [engine :Int->Void resolve] {(when caption (engine.print caption))(engine.showImage path)(engine.print "Score (0-5): ")(engine.input ->:Void str (resolve (Std.parseInt str)))}))

(defMacroVar cardId 0)
(defMacroVar groupId 0)

(defMacro group [&body body]
    (setMacroVar groupId (+ groupId 1))
    (setMacroVar cardId 0)
    `{,@body})

(defMacro card [front back &builder b]
    (let [idSymbol ->name (b.symbol "${name}${groupId}_${cardId}")
            cObject (idSymbol "cObject")
            cScore (idSymbol "cScore")
            cRepetitions (idSymbol "cRepetitions")
            cPreviousEaseFactor (idSymbol "cPreviousEaseFactor")
            cPreviousInterval (idSymbol "cPreviousInterval")
            cNextDate (idSymbol "cNextDate")
            cStudy (idSymbol "cStudy")]
        (setMacroVar cardId (+ cardId 1))
        `{
            (var ,cObject (object front ,front back ,back))
            (savedVar :Int ,cRepetitions 0)
            (savedVar :Float ,cPreviousEaseFactor 2.5)
            (savedVar :Int ,cPreviousInterval 0)
            (savedVar :Float ,cNextDate (DateTime.make))

            (let [:DateTime nextDate ,cNextDate]
                (localFunction :Void ,cStudy [:StudyEngine engine :Void->Void cc]
                    (localFunction :Void ,cScore [:Int quality]
                        (localVar &mut interval 0)
                        (cond 
                            ((>= quality 3)
                                (set interval (Math.ceil (case ,cRepetitions (0 1) (1 6) (more (* ,cPreviousEaseFactor ,cPreviousInterval)) (never otherwise))))
                                (+= ,cRepetitions 1)
                                (set ,cPreviousEaseFactor (+ ,cPreviousEaseFactor (- 0.1 (* (- 5 quality) (+ 0.08 (* (- 5 quality ) 0.02)))))))
                            (true
                                (set ,cRepetitions 0)
                                (set interval 1)))
                        (set ,cPreviousEaseFactor (max 1.3 ,cPreviousEaseFactor))
                        (set ,cPreviousInterval interval)
                        (let [:DateTime cNextDate (DateTime.now)]
                            #{cNextDate += halfDayInterval;}#
                            (doFor _ (range (- interval 1))
                                #{cNextDate += oneDayInterval;}#)
                            (set ,cNextDate cNextDate))
                        (cc))
                    (engine.clear)
                    (if (or #{DateTime.now() > nextDate;}# (#if debug true false))
                            (.show .front ,cObject engine
                                ->:Void 
                                    (.score .back ,cObject engine ,cScore))
                        {
                            (engine.println "skipping a card until $(nextDate.toString)")
                            (cc)
                        }))
                (studyList.push ,cStudy))
        }))

(defMacro reversed [front back]
    `(group
        (card ,front ,back)
        (card ,back ,front)))

(defMacro cloze [&builder b &body textLines]
    (let [cardDecls []]
        (doFor [i line] (enumerate textLines)
            (let [line (eval line)]
                (when (StringTools.startsWith line "?")
                    (cardDecls.push
                        `(card
                            (object
                                show (clozeShow.bind ,i ,textLines) 
                                score ->:Void _ 0)
                            (object
                                show ->:Void _ 0
                                score (clozeScore.bind ,i ,textLines)))))))
        (b.callSymbol "group" cardDecls)))

(function :Void studyAll [&opt :StudyEngine engine]
    (unless engine
        (set engine
            (object
                clear ->:Void (doFor i (range 5) (Sys.println ""))
                print ->:Void text (Sys.print text)
                println ->:Void text (Sys.println text)
                showImage ->:Void path (assertProcess (case (Sys.systemName) ("Windows" "cmd.exe") ("Linux" "xdg-open") ("Mac" "start") (never otherwise)) (case (Sys.systemName) ("Windows" ["/C" path]) ((or "Mac" "Linux") [path]) (never otherwise)))
                printCC ->:Void [text cc] {(Sys.print text)(.readLine (Sys.stdin))(cc)}
                printlnCC ->:Void [text cc] {(Sys.println text)(.readLine (Sys.stdin))(cc)}
                showImageCC ->:Void [path cc] {(assertProcess (case (Sys.systemName) ("Windows" "cmd.exe") ("Linux" "xdg-open") ("Mac" "start") (never otherwise)) (case (Sys.systemName) ("Windows" ["/C" path]) ((or "Mac" "Linux") [path]) (never otherwise)))(.readLine (Sys.stdin))(cc)}
                input ->:Void resolve (resolve (.readLine (Sys.stdin))))))
    (when studyList
        (let [nextIndex (Std.random studyList.length)
                nextToStudy (nth studyList nextIndex)]
            (studyList.splice nextIndex 1)
            (nextToStudy engine (studyAll.bind engine)))))