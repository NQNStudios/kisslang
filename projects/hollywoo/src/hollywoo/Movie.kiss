// Mostly immutable, reusable resources:
(prop :Map<String,Set> sets (new Map))
(prop :Map<String,Actor> actors (new Map))
(prop :Map<String,Sound> sounds (new Map))

// TODO for some reason this won't work when declared in Kiss syntax:
// Mutable representation of frames in time:
// var scenes:Map<String, Scene<Set, StagePosition, StageFacing, ScreenPosition, Actor>> = [];
(prop :Map<String,Bool> shownScenes (new Map))
(prop :Map<String,Bool> shownCharacters (new Map))

// This is set and unset by doPreload defined in HollywooDSL.kiss
(prop &mut isLoading false)

(function :Appearance appearanceFlag [:Map<String,Bool> map :String key]
    (if (dictGet map key)
            ReAppearance
        {
            (dictSet map key true)
            FirstAppearance
        }))

(prop &mut :String sceneKey "")
(method _currentScene [] (dictGet scenes sceneKey))

(defNew
    [
        // "View" in the Model-View-Controller architecture:
        &prop :Director<Set,StagePosition,StageFacing,ScreenPosition,Actor,Sound> director
    ]

    (super))

(method newSet [name :Set set]
    (assert isLoading)
    (dictSet sets name set))

(method newSceneFromSet [name :String setKey :SceneTime time :ScenePerspective perspective]
    (assert isLoading)
    (dictSet scenes name (objectWith
                                [
                                    set
                                        (dictGet sets setKey)
                                    characters
                                        (new Map)
                                ]
                                time
                                perspective)))

(method newScene [name :Scene<Set,StagePosition,StageFacing,ScreenPosition,Actor> scene]
    (assert isLoading)
    (dictSet scenes name scene))

(method setScene [name :Continuation cc]
    (set sceneKey name)
    (director.showScene
        (dictGet scenes name)
        (appearanceFlag shownScenes name)
        cc))

(method newSound [name :Sound s]
    (assert isLoading)
    (dictSet sounds name s))

(method playSound [name :Continuation cc &opt :Float volumeMod]
    (set volumeMod (or volumeMod 1))
    (assert (<= 0 volumeMod 1))
    (director.playSound (dictGet sounds name) volumeMod cc))

(method newActor [name :Actor actor]
    (assert isLoading)
    (dictSet actors name actor))

(method addCharacter [actorName :StagePosition position :StageFacing facing :Continuation cc]
    (let [character (object stagePosition position stageFacing facing actor (dictGet actors actorName))]
        (dictSet .characters (_currentScene) actorName character)
        (director.showCharacter
            character
            (appearanceFlag shownCharacters actorName)
            cc)
        ))

/* TODO
(method removeCharacter [

])
*/

// TODO moveCharacter remove them, add them to another scene
// TODO moveCharacterAndFollow remove them, add them to another scene, set that the scene

// Dialogue:

(method normalSpeech [actorName wryly text cc]
    (director.showDialog actorName (OnScreen (dictGet .characters (_currentScene) actorName)) wryly text cc))

(method onPhoneSpeech [actorName wryly text cc]
    (director.showDialog actorName (ifLet [charOnScreen (dictGet .characters (_currentScene) actorName)]
                                    (OnScreen charOnScreen)
                                (FromPhone (dictGet actors actorName))) wryly text cc))