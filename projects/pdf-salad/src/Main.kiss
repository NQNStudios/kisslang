(defun loadAll [:Array<String> paths :Function callback &opt :Array<PDFDocument> pdfs]
    (unless pdfs (set pdfs []))
    (deflocal nextPdf (paths.shift))
    (if (nextPdf.endsWith ".pdf")
            (awaitLet [pdf (PDFDocument.load (Fs.readFileSync (print nextPdf)))]
                (pdfs.push pdf)
                (if paths
                        (loadAll paths callback pdfs)
                    (callback pdfs)))
        (when paths
            (loadAll paths callback pdfs))))

(defun main []
    (let [[sourceDir numPages] (Sys.args)]
        (loadAll (for file (Fs.readdirSync sourceDir) (+ sourceDir "/" file))
            (lambda [:Array<PDFDocument> inputPdfs]
                (awaitLet [saladPdf (PDFDocument.create)
                            pages (Promise.all
                                (for _ (range 0 (Std.parseInt numPages))
                                    (let [:PDFDocument pdf (nth inputPdfs (Std.random inputPdfs.length))
                                            page (Std.random (pdf.getPageCount))]
                                        (saladPdf.copyPages pdf [page]))))]
                    (doFor page pages (saladPdf.addPage (first page)))
                    (awaitLet [bytesOut (saladPdf.save)]
                        (Fs.writeFileSync "out.pdf" bytesOut)))))))
