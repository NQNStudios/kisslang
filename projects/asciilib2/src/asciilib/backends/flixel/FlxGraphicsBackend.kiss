(prop &mut :FlxGroup backgroundColors null)
(prop &mut :FlxGroup letters null)
(prop &mut :Int letterWidth 0)
(prop &mut :Int letterHeight 0)
(prop &mut :FlxBitmapFont font null)

(defnew [_state
            _fontAsset
            &opt _letters _region _spacing]
    [:FlxState state _state
        :FlxBitmapFontGraphicAsset fontAsset _fontAsset
        :String fontLetters _letters
        :FlxRect region _region
        :FlxPoint spacing _spacing])

(method :Void initialize [:String title :Int width :Int height :Int _letterWidth :Int _letterHeight]
    (set letterWidth _letterWidth)
    (set letterHeight _letterHeight)
    (set font (FlxBitmapFont.fromMonospace fontAsset fontLetters (new FlxPoint letterWidth letterHeight) region spacing))
    (set backgroundColors (new FlxGroup))
    (set letters (new FlxGroup)))

(method :Void draw [:Graphics graphics]
    (backgroundColors.kill)
    (set backgroundColors (new FlxGroup))
    (letters.kill)
    (set letters (new FlxGroup))
    (for x (range graphics.width)
        (for y (range graphics.height)
            (let [bgc (graphics.getBackgroundColor x y)]
                (unless (Colors.equal bgc Colors.Black)
                    (let [sprite (new FlxSprite (* letterWidth x) (* letterHeight y))]
                        (backgroundColors.add (sprite.makeGraphic letterWidth letterHeight (FlxColor.fromRGB bgc.r bgc.g bgc.b))))))
            (let [letter (graphics.getLetter x y)]
                (unless (= letter.char " ")
                    (let [color letter.color
                            text (new FlxBitmapText font)]
                        (set text.text letter.char)
                        (set text.x (* letterWidth x))
                        (set text.y (* letterHeight y))
                        (set text.useTextColor true)
                        (set text.textColor (FlxColor.fromRGB color.r color.g color.b))
                        (letters.add text))))))
    (state.add backgroundColors)
    (state.add letters))
