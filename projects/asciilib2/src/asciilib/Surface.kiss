(defnew [_width _height &opt :Color backgroundColor :String letter :Color letterColor]
    [:Int width _width
        :Int height _height
        :Colors backgroundColors (new Colors width height (or backgroundColor Colors.Black))
        :Letters letters (new Letters width height (or letter " "))
        :Colors letterColors (new Colors width height (or letterColor Colors.White))
        :Grid<Bool> opacity (new Grid width height true)
        :Grid<String> specialInfo (new Grid width height "")])

(method getBackgroundColor [x y]
    (backgroundColors.getPixel x y))

(method setBackgroundColor [x y color]
    (backgroundColors.setPixel x y color))

(method getLetter [x y]
    (object char (letters.getChar x y) color (letterColors.getPixel x y)))

(method setLetter [x y letter]
    (letters.setChar x y letter.char)
    (letterColors.setPixel x y letter.color))

(method isCellOpaque [x y]
    (opacity.getCell x y))

(method setCellOpacity [x y value]
    (opacity.setCell x y value))

(method getSpecialInfo [x y]
    (specialInfo.getCell x y))

(method setSpecialInfo [x y value]
    (specialInfo.setCell x y value))

// TODO rectangle type
// TODO optional source rectangle argument
(method blitSurface [:Surface surface x y]
    (doFor [srcX destX] (the kiss.List<kiss.List<Int>> (zipDrop (range surface.width) (range x (+ x surface.width))))
        (when (< -1 destX width)
            (doFor [srcY destY] (the kiss.List<kiss.List<Int>> (zipDrop (range 0 surface.height) (range y (+ y surface.height))))
                (when (< -1 destY height)
                    (when (surface.isCellOpaque srcX srcY)
                        (setBackgroundColor destX destY (surface.getBackgroundColor srcX srcY))
                        (setLetter destX destY (surface.getLetter srcX srcY))
                        (setSpecialInfo destX destY (surface.getSpecialInfo srcX srcY))
                        // Cover transparent cells in the lower surface with opaque ones
                        (setCellOpacity destX destY true)))))))

(function fromString [text]
    (let [stream (Stream.fromString text)
            :Map<String,Color> colors (new Map)
            :Map<String,String> infoCodes (new Map)
            :Map<String,Bool> opacityCodes [=>"0" false =>"1" true]]
        
        (stream.dropString "COLORS\n")
        (loop
            (case (stream.takeLine)
                ((Some "INFO CODES") (break))
                ((Some colorLine)
                    (let [[symbol _r _g _b] (colorLine.split " ")]
                        (dictSet colors symbol (object r (Std.parseInt _r) g (Std.parseInt _g) b (Std.parseInt _b)))))
                (None (throw "Expected INFO CODES in Surface"))))
        (loop
            (case (stream.takeLine)
                ((Some "SIZE") (break))
                ((Some infoLine)
                    (let [infoTokens (infoLine.split " ")]
                        (dictSet infoCodes (infoTokens.shift) (infoTokens.join " "))))
                (None (throw "Expected SIZE in Surface"))))
        (case (stream.takeLine)
            (None (throw "expected [width] [height] in Surface"))
            ((Some sizeLine)
                (let [[width height] (.map (sizeLine.split " ") Std.parseInt)
                        surface (new Surface width height)]
                    (stream.dropString "CHARACTERS\n")
                    (doFor row (range height)
                        (setNth surface.letters.rows row (stream.expect "line of characters" ->{(stream.takeLine)})))
                    (stream.dropString "BACKGROUND COLORS\n")
                    (doFor y (range height)
                        (doFor x (range width)
                            (surface.setBackgroundColor x y (dictGet colors (stream.expect "a color code" ->{(stream.takeChars 1)}))))
                        (stream.dropString "\n"))
                    (stream.dropString "CHARACTER COLORS\n")
                    (doFor y (range height)
                        (doFor x (range width)
                            (surface.letterColors.setPixel x y (dictGet colors (stream.expect "a color code" ->{(stream.takeChars 1)}))))
                        (stream.dropString "\n"))
                    (stream.dropString "OPACITY\n")
                    (doFor y (range height)
                        (doFor x (range width)
                            (surface.opacity.setCell x y (dictGet opacityCodes (stream.expect "0 or 1" ->{(stream.takeChars 1)}))))
                        (stream.dropString "\n"))
                    (stream.dropString "SPECIAL INFO\n")
                    (doFor y (range height)
                        (doFor x (range width)
                            (surface.specialInfo.setCell x y (dictGet infoCodes (stream.expect "a special info code" ->{(stream.takeChars 1)}))))
                        (stream.dropString "\n"))
                    surface)))))
