(defun countChar [char str]
    (count (str.split "") (lambda [c] ?(= c char))))

(defun parsePasswordCheck1 [:String ruleStr]
    (let [[min max letter]
                (.split (ruleStr.replace " " "-") "-")]
        (lambda [password] (<= (Std.parseInt min) (countChar letter password) (Std.parseInt max)))))

(defun parsePasswordCheck2 [:String ruleStr]
    (let [[a b letter]
                (.split (ruleStr.replace " " "-") "-")
            aIdx (- (Std.parseInt a) 1)
            bIdx (- (Std.parseInt b) 1)]
        (lambda [password] (= 1 (countChar letter (+ (.charAt password aIdx) (.charAt password bIdx)))))))

(defun validateInputLine [:String line ruleParser]
    (let [[rule password]
                (line.split ": ")]
        ((ruleParser rule) password)))