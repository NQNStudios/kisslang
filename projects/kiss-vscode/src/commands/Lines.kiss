// Perform a synchronous transformation on each selected line of text
(function _mapLinesSync [selectedText mapFunc]
    (let [:String->String safeMapFunc
                    ->[line]
                        (ifLet [trimmedLine (StringTools.trim line)] (try (mapFunc trimmedLine) (catch [e] (Std.string e))) "")
                mappedText 
                    (.join
                        (map
                            (.split selectedText "\n")
                            safeMapFunc)
                        "\n")]
            (.edit activeTextEditor
                (lambda [e]
                    (let [editor activeTextEditor]
                        (e.delete editor.selection)
                        (e.insert editor.selection.active mappedText))))))

(defCommand context mapLinesSync "Transform the selected text lines using a String->String kiss function" "C-; C-m" []
    (awaitLet [mapFuncStr (inputEditor "mapLinesFunc.kiss" "a String->String function through which to map the selected lines")]
        (let [:String->String mapFunc (evalString mapFuncStr)]
            (_mapLinesSync (selectedText) mapFunc))))

// Sort the selected lines of text using a comparison function (String,String) -> Int
(function _sortLinesSync [selectedText :Dynamic compareFunc]
    (let [lines (selectedText.split "\n")]
        (lines.sort compareFunc)
        (.edit activeTextEditor
            (lambda [e]
                (let [editor activeTextEditor]
                    (e.delete editor.selection)
                    (e.insert editor.selection.active (lines.join "\n")))))))

(defCommand context sortLinesSync "Sort the selected text lines using a (String,String)->Int comparator function" "C-; C-s" []
    (awaitLet [compareFuncStr (inputEditor "sortLinesFunc.kiss" "a (String,String) -> Int function with which to sort the selected lines")]
        (_sortLinesSync (selectedText) (if (< 0 compareFuncStr.length) (evalString compareFuncStr) Reflect.compare))))