(defCommand context evalAndPrint "Evaluate and print a kiss expression's value" "C-; C-e" []
    (let [st (selectedText)]
        (withValueOrInputEditor st "kiss.evalAndPrint" "A kiss expression to evaluate"
            (infoMessage (Std.string (evalString st))))))

(defCommand context newKissClass "Create a new kiss class" "C-; C-n" []
    (awaitLet [className (inputBox)]
        (when className
            (let [currentFile
                        activeTextEditor.document.fileName
                    currentFileDirectory
                        (Path.directory currentFile)
                    haxeFile
                        (joinPath currentFileDirectory "${className}.hx")
                    kissFile
                        (joinPath currentFileDirectory "${className}.kiss")
                    // Try to use the same package statement from the first line of the
                    // currently open Kiss class's .hx file
                    pkg
                        (or
                            (try
                                    (let [currentHaxeFile
                                                (currentFile.withExtension "hx")]
                                        (first (.split (File.getContent currentHaxeFile) "\n")))
                                (catch [e] ""))
                            // Default to no specific package declaration
                            "package;")]
                (File.saveContent haxeFile
"${pkg}

import kiss.Prelude;
import kiss.List;

@:build(kiss.Kiss.build())
class ${className} {}
")
                (File.saveContent kissFile "")
                (awaitLet [_ (showTextDocument (Uri.file haxeFile) (object viewColumn ViewColumn.Active))]
                    (executeCommand "workbench.action.keepEditor")
                    (awaitLet [_ (showTextDocument (Uri.file kissFile) (object viewColumn ViewColumn.Beside))]
                        (executeCommand "workbench.action.keepEditor")))))))

(function correspondingFile [:String kissOrHxFile]
    (let [base
                (kissOrHxFile.withoutExtension)
            ext
                (kissOrHxFile.extension)
            correspondingExt
                (case ext
                    ("hx" "kiss")
                    ("kiss" "hx")
                    (otherwise (throw "No corresponding file for ${kissOrHxFile}")))]
        "${base}.${correspondingExt}"))

(defCommand context showCorrespondingFile "Open the corresponding .kiss/.hx file to this one" "C-; C-f" []
    (showTextDocument (Uri.file (correspondingFile .fileName .document activeTextEditor))))

(defCommand context insertUTestCase "Generate a UTest test case in this .hx/.kiss file" "C-; C-c" []
    (awaitLet [testName (inputBox)
                &sync testName
                    "$(.toUpperCase (testName.substr 0 1))$(testName.substr 1)"
                _ (insert 
    "function test${testName}() {
        _test${testName}();
    }
    ")
                _ (showTextDocument (Uri.file (correspondingFile .fileName .document activeTextEditor)))
                &sync pos (activeTextEditor.document.positionAt .length (activeTextEditor.document.getText))
                _ (insertAt pos
"
                        
(function _test${testName} []
    (Assert.pass))
")
                &sync endPos (activeTextEditor.document.positionAt .length (activeTextEditor.document.getText))]
        (activeTextEditor.revealRange (new Range pos endPos))
        (set activeTextEditor.selection (new Selection pos endPos))))