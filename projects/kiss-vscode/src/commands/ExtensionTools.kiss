(loadFrom "kiss-vscode" "src/Util.kiss")

(function kvLibpath [] (.trim (assertProcess "haxelib" ["libpath" "kiss-vscode"])))
(function :ChildProcessSpawnSyncOptions options [] (object cwd (let [path (kvLibpath)] (path.substr 0 (- path.length 1)))))

(function handleUpdateFailure [error]
    (showCompileError "Error updating Kiss-VSCode: $error")
    (object)
    **(throw error))

(defMacro forceUpdateFailure [error]
    `{
        (handleUpdateFailure ,error)
        (return)
    })

(function :Void updateKissVscode [&opt _]
    (trySpawnSync "haxe" ["build.hxml"] (options) forceUpdateFailure)
    (if (= "Windows" (Sys.systemName))
            {
                (trySpawnSync "cmd.exe" ["/c" "npm" "install"] (options) forceUpdateFailure)
                (trySpawnSync "cmd.exe" ["/c" "vsce" "package"] (options) forceUpdateFailure)
            }
        {
            (trySpawnSync "npm" ["install"] (options) forceUpdateFailure)
            (trySpawnSync "npx" ["esbuild" "./bin/extension.js" "--bundle" "--outfile=bin/bundle.js" "--external:vscode" "--format=cjs" "--platform=node"] (options) forceUpdateFailure)
            (trySpawnSync "vsce" ["package"] (options) forceUpdateFailure)
        })
    (awaitLet [_ (executeCommand 
                        "workbench.extensions.command.installFromVSIX"
                        (Uri.file (joinPath (kvLibpath) (last (filter (FileSystem.readDirectory (kvLibpath)) ->file (file.endsWith ".vsix"))))))]
            (catch [error]
                (handleUpdateFailure error)))
        
        {})

(function testAndUpdateKissVscode [&opt _]
    (trySpawnSync "test.sh" [] (options) handleUpdateFailure)
    (updateKissVscode))