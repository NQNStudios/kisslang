(defun userConfigDir []
    (Path.join [
        (or (Sys.getEnv "MSYSHOME") (Sys.getEnv "HOME") (Sys.getEnv "UserProfile"))
        ".kiss"]))

(defun timeStamp []
    (.replace (.replace (.toString (Date.now)) ":" "-") " " "-"))

(defvar &mut activeConfigDir "")
(defvar &mut :Dynamic config null)

(defun tryLoadConfig [&opt :String text]
    (let [activeConfigPath (Path.join [activeConfigDir "config.js"])
            backupConfigPath (Path.join [activeConfigDir (+ "config" (timeStamp) ".js")])]
        // Backup existing config.js
        (when (FileSystem.exists activeConfigPath)
            (FileSystem.rename activeConfigPath backupConfigPath))
        // Supply the default (empty) config if the user doesn't have one
        (let [customConfigDir
                    (if (FileSystem.exists (userConfigDir))
                            (userConfigDir)
                        (Path.join [activeConfigDir "default"]))
                customConfigFiles
                    (FileSystem.readDirectory customConfigDir)]
            // Copy the custom config files to the active config directory
            (doFor file customConfigFiles
                (File.copy
                    (Path.join [customConfigDir file])
                    (Path.join [activeConfigDir file])))
            (let [buildResult
                        (ChildProcess.spawnSync "haxe" ["build.hxml"] (object cwd activeConfigDir))]
                (if (and !buildResult.error (= 0 buildResult.status))
                        // Successful compilation! require the config.js package
                        (begin
                            // TODO Node.require() caches the module so re-opening vscode is still required:
                            // https://stackoverflow.com/questions/9210542/node-js-require-cache-possible-to-invalidate
                            (set config .KissConfig (Node.require (Path.join [activeConfigDir "config.js"])))
                            (.registerBuiltins (the KissConfig config))
                            (.registerCommand (the KissConfig config) "Reload Kiss config" tryLoadConfig)
                            (.init (the KissConfig config))
                            (Vscode.window.showInformationMessage "Config loaded successfully!"))
                    // If there's a build error, restore the config.js backup
                    (begin
                        (when (FileSystem.exists backupConfigPath)
                            (FileSystem.rename backupConfigPath activeConfigPath))
                        (Vscode.window.showErrorMessage
                            (+ "Config failed to compile: "
                                (if buildResult.error 
                                        #| "" + buildResult.error|#
                                    #| "" + buildResult.stderr |#))))))))
    (return))

(defun _activate [:ExtensionContext context]
    (context.subscriptions.push
        (Vscode.commands.registerCommand
            "kiss.reloadConfig"
            tryLoadConfig))

    (context.subscriptions.push
        (Vscode.commands.registerCommand
            "kiss.runCommand"
            (lambda [] 
                (if config
                        (.runCommand (the KissConfig config))
                    (Vscode.window.showErrorMessage "Can't run commands! No config is loaded."))
                    (return))))
                
    (set activeConfigDir (Path.join [context.extensionPath "config"]))
    (tryLoadConfig))
