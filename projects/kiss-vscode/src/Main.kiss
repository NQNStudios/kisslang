(#if test
        (load "Util.kiss")
    // This also loads Util.kiss:
    (load "commands/ExtensionTools.kiss"))

(function userHome [] (or (Sys.getEnv "MSYSHOME") (Sys.getEnv "HOME") (Sys.getEnv "UserProfile")))
(function userConfigDir []
    (joinPath
        (userHome) 
        ".kiss"))

(var &mut activeConfigDir "")
(var &mut lastConfigDir "")
(var &mut builtinConfigDir "")
(var &mut commandsDir "")
(var &mut :KissConfig config null)

(function npmSafeTrySpawnSync [:Array<String> cmd handleConfigFailure]
    (let [program
                (if (= "Windows" (Sys.systemName))
                        {
                            (cmd.insert 0 "/c")
                            "cmd.exe"
                        }
                    (cmd.shift))]
        (trySpawnSync program cmd (object cwd activeConfigDir) handleConfigFailure)))

(#when test (var :String->Void warningMessage Prelude.printStr))

(function :Void tryLoadConfig [&opt :Bool force :Bool fallbackToDefault :String _]
    (let [handleConfigFailure
                ->errorMessage {
                    (try
                        {
                            (when (FileSystem.exists activeConfigDir)
                                (FileSystem.deleteDirectory activeConfigDir))
                            (when (FileSystem.exists lastConfigDir)
                                (FileSystem.rename lastConfigDir activeConfigDir))
                        }
                        (catch [e] (throw "failed to delete bad config: $e")))
                    // When user config fails to build, use the default
                    // Counterintuitively, this unless is correct:
                    (unless fallbackToDefault
                        (warningMessage "Falling back to the default Kiss-VSCode Config")
                        (unless config
                            (tryLoadConfig true)))
                    (#if test
                            // If there's a build error when testing, throw a test failure
                            (throw errorMessage)
                        // If there's a build error at runtime, tell the user
                        (showCompileError errorMessage))
                }]
        
        // Choose where to find the custom config
        (let [customConfigDir
                    (#if test
                            // When running unit tests, build the example config
                            (joinPath builtinConfigDir "example")
                        // When running for real, try the user's config directory
                        (if (and !fallbackToDefault (FileSystem.exists (userConfigDir)))
                                (userConfigDir)
                            // Supply the default (empty) config if the user doesn't have one, or if the user's failed to compile
                            (joinPath builtinConfigDir "default")))]
        // If a backup exists, delete it
        (when (FileSystem.exists lastConfigDir)
            (FileSystem.deleteDirectory lastConfigDir))
        // TODO maybe also expose that backup to the user via a "rollback .kiss" command so they can rollback their config without using Git?
        (when (FileSystem.exists activeConfigDir)
            // If there is an active config folder from a previous session, that is still up-to-date,
            // skip re-compilation and just use it
            (#unless test
                (unless force
                    (let [oldConfigFile (joinPath activeConfigDir "config.js")]
                        (when (and (FileSystem.exists oldConfigFile) 
                                (let [mTime
                                            ->file (.getTime .mtime (FileSystem.stat file))
                                        oldFileMTime
                                            (mTime oldConfigFile)
                                        userConfigMTime
                                            (let [foldersToCheck [builtinConfigDir]]
                                                (when (FileSystem.exists (userConfigDir))
                                                    (foldersToCheck.insert 0 (userConfigDir)))
                                                (when commandsDir
                                                    (foldersToCheck.push commandsDir))
                                                (apply max
                                                    (map (apply concat (map foldersToCheck readDirectory)) mTime)))]
                                    (> oldFileMTime userConfigMTime)))
                            (requireConfigJs oldConfigFile)
                            (Vscode.window.showInformationMessage "Config loaded successfully!")
                            (return)))))
            // Backup currently active config
            (FileSystem.rename activeConfigDir lastConfigDir))

            (FileSystem.createDirectory activeConfigDir)
            // Copy the boilerplate config files to the active config directory
            (doFor file (FileSystem.readDirectory builtinConfigDir)
                (unless (FileSystem.isDirectory (joinPath builtinConfigDir file))
                    (File.copy
                        (joinPath builtinConfigDir file)
                        (joinPath activeConfigDir file))))
            // Recursively copy the user's custom config files to the active config directory
            (walkDirectory customConfigDir null
                ->file
                    (File.copy
                        (joinPath customConfigDir file)
                        (joinPath activeConfigDir file))
                ->folder
                    (FileSystem.createDirectory
                        (joinPath activeConfigDir folder)))
            // install all Haxe dependencies:
            (trySpawnSync "haxelib" ["install" "all" "--always"] (object cwd activeConfigDir) handleConfigFailure)
            // install all of the user's Node dependencies:
            (when (FileSystem.exists (joinPath activeConfigDir "package.json"))
                (npmSafeTrySpawnSync ["npm" "install"] handleConfigFailure))
            // install built-in node dependencies:
            (npmSafeTrySpawnSync ["npm" "install" "jsdom"] handleConfigFailure) 
            // Run the haxe compiler:
            (trySpawnSync "haxe" ["build.hxml"] (object cwd activeConfigDir) handleConfigFailure)

            // Successful compilation!
            (#if test
                    // When testing:
                    (print "Example config compiled successfully")
                // When running the extension:
                // Require the config.js package that was generated.
                // But since Node.require() caches modules by filename,
                // copy it to a unique path first so hot-reloading works properly.
                (let [activeConfigFile (joinPath activeConfigDir "config.js")]
                    (requireConfigJs activeConfigFile)
                    (Vscode.window.showInformationMessage "Config loaded successfully!"))))))

(var &mut extensionPath "")
(function requireConfigJs [file]
    (let [uniqueConfigFile (joinPath activeConfigDir "$(.toShort (Uuid.v4)).js")]
        (File.copy file uniqueConfigFile)
        (set config (the KissConfig .KissConfig (Node.require uniqueConfigFile)))
        (#unless test
            (set Prelude.printStr ->:Void s (Vscode.window.showInformationMessage s)))
        (set config.tryLoadConfig ->[&opt _] (tryLoadConfig true false))
        (set config.extensionPath extensionPath)
        (config.prepareInterp)
        // User-defined init:
        (config.init)))

(#unless test
    (function _activate [:ExtensionContext context]
        (set extensionPath context.extensionPath)
        (context.subscriptions.push
            (Vscode.commands.registerCommand
                "kiss.reloadConfig"
                ->(tryLoadConfig true)))
        (context.subscriptions.push
            (Vscode.commands.registerCommand
                "kiss.runCommand"
                (lambda :Void [] 
                    (if config
                            (.runCommand (the KissConfig config))
                        (Vscode.window.showErrorMessage "Can't run commands! No config is loaded.")))))

        (context.subscriptions.push
            (Vscode.commands.registerCommand
                "kiss.runLastCommand"
                (lambda :Void [] 
                    (if config
                            (.runLastCommand (the KissConfig config))
                        (Vscode.window.showErrorMessage "Can't run commands! No config is loaded.")))))

        (context.subscriptions.push
            (Vscode.commands.registerCommand
                "kiss.updateKissVscode"
                (lambda :Void [] 
                    (updateKissVscode))))

        (context.subscriptions.push
            (Vscode.commands.registerCommand
                "kiss.runKeyboardShortcut"
                (lambda :Void [] 
                    (if config
                            (.runKeyboardShortcut (the KissConfig config))
                        (Vscode.window.showErrorMessage "Can't run commands! No config is loaded.")))))

        (context.subscriptions.push
            (KTxt2EditorProvider.register context))

        (set builtinConfigDir
            (joinPath
                (try
                        (Prelude.libPath "kiss-vscode")
                    (catch [e] context.extensionPath))
                "config"))
        (set commandsDir
            (try (let [srcPath (Prelude.libPath "kiss-vscode")]
                    (joinPath srcPath "src" "commands"))
                (catch [e] "")))
        (set activeConfigDir (joinPath (userHome) ".kiss-vscode" "activeConfig"))
        (set lastConfigDir (joinPath (userHome) ".kiss-vscode" "lastActiveConfig"))

        (tryLoadConfig)))

// Manually define main so it will exist when test is not defined:
(function :Void main []
    (#when test
        (set builtinConfigDir "config")
        (set commandsDir "src/commands")
        (set activeConfigDir "_activeConfig")
        (set lastConfigDir "_lastActiveConfig")
        (tryLoadConfig)
        // Load the config twice more to make sure it moves the last active config out of the way properly:
        (tryLoadConfig)
        (tryLoadConfig)))
