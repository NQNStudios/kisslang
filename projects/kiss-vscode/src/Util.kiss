/**
 * Aliases
 */


// output 
(defAlias &call infoMessage Vscode.window.showInformationMessage)
(defAlias &call warningMessage Vscode.window.showWarningMessage)
(defAlias &call errorMessage Vscode.window.showErrorMessage)

// input
(defAlias &call inputBox Vscode.window.showInputBox)
(defAlias &call _quickPick Vscode.window.showQuickPick)

(function quickPickItem [label &opt description]
    (object
        label label
        description description
        detail null
        picked null
        alwaysShow null))

(function quickPick [:Array<String> strings]
    (awaitLet [chosenItem (_quickPick (for string strings (quickPickItem string)))]
        (when chosenItem chosenItem.label)))

(function quickPickMap [:Map<String,Dynamic> stringMap]
    (awaitLet [chosenItem (_quickPick (for =>key value stringMap (quickPickItem key (Std.string value))))]
        (when chosenItem (dictGet stringMap chosenItem.label))))

// commands
(defAlias &call executeCommand Vscode.commands.executeCommand)
(function repeatCommand [command times]
    (let [iteration
                ->[&opt _] (executeCommand command)
            &mut promise
                (iteration)]
        (doFor i (range (- times 1))
            (set promise (promise.then iteration)))
        promise))

(defMacro withValueOrInputBox [v &body body]
    `(if ,v
            {,@body}
        (awaitLet [,v (inputBox)]
            ,@body)))

(defMacro withValueOrQuickPick [v options &body body]
    `(if ,v
            {,@body}
        (awaitLet [,v (quickPick ,options)]
            ,@body)))

(defMacro withValueOrQuickPickMap [v options &body body]
    `(if ,v
            {,@body}
        (awaitLet [,v (quickPickMap ,options)]
            ,@body)))

// This has to be a macro so it can return from tryLoadConfig
(defMacro trySpawnSync [command args options onError]
    `(let [command ,command
            args ,args
            options ,options
            result (ChildProcess.spawnSync command args options)]
        (if result.error
                // TODO i can't remember if this needs to be a throw for some reason,
                // but it seems like it's supposed to be (,onError ...)(return) like below
                (throw "Error $result.error from $command ${args}: $result.stdout $result.stderr")
            (case result.status 
                (0 null)
                (errCode
                    (,onError "Error code $errCode from $command ${args}: $result.stdout $result.stderr")
                    (return))))))