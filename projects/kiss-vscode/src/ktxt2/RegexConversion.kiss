(defNew [&prop &mut :String name
            &prop &mut :String sourceType
            &prop &mut :String outputType
            :String regex
            :String blockTemplate
            &opt :String flags]
    [
        &mut :String->Bool canConvert ->block ?(R.match regex block (or flags ""))
        &mut :String->String convert ->_ "\$(let [groups .namedGroups (R.match #\"$(escapeRegex regex)\"# source \"$(if flags flags "")\") group ->g (dictGet groups g)] \"${blockTemplate}\")"
    ])

// This may turn out to be an unsolvable rabbit hole...
(function escapeRegex [:String regex]
    (regex.replace "\\" "\\\\"))