(load "../Util.kiss")

// Based on https://github.com/microsoft/vscode-extension-samples/blob/main/custom-editor-sample/src/catScratchEditor.ts

(function register [context]
	(set Prelude.printStr ->s (infoMessage s))
    (let [provider (new KTxt2EditorProvider context)]
        (Vscode.window.registerCustomEditorProvider "ktxt2.splitView" provider)))

(defNew [&prop :ExtensionContext context])

(method :String insertSpecialChars [:String text]
	(if (text.endsWith "\n\n")
			(+ (text.substr 0 (- text.length 2)) "Â¶")
		text))

(method :Promise<Void> resolveCustomTextEditor [:TextDocument document :WebviewPanel webviewPanel :CancellationToken _token]
    (set webviewPanel.webview.options (object enableScripts true))
    (set webviewPanel.webview.html (htmlForWebview webviewPanel.webview))
    (let [updateWebview
				->(webviewPanel.webview.postMessage (object type "update" text (document.getText)))
			changeDocumentSubscription
				(Vscode.workspace.onDidChangeTextDocument
					->e (when (= (e.document.uri.toString) (document.uri.toString)) 
							(updateWebview)))
			streamPosToDocumentPos ->pos (document.positionAt pos.absoluteChar)
			streamPosToOffsetDocumentPos ->[pos offset] (document.positionAt (+ offset pos.absoluteChar))
			rangeFromStartEnd ->[start end] (new Range (streamPosToDocumentPos start) (streamPosToDocumentPos end))
			makeEdit
				->[:WorkspaceEdit->Void builder]
					(let [edit (new WorkspaceEdit)]
						(builder edit)
						(Vscode.workspace.applyEdit edit))]
		(webviewPanel.onDidDispose
			->e (changeDocumentSubscription.dispose))
		
		(webviewPanel.webview.onDidReceiveMessage
			->:Void [e]
				(case (the MessageFromEditor e)
					((object type "print" text message)
						(infoMessage message))
					((objectWith [type "replace"] text start end)
						(makeEdit
							->edit (edit.replace document.uri (rangeFromStartEnd start end) (insertSpecialChars text))))
					((objectWith [type "insertBefore"] text position)
						(makeEdit
							->edit (edit.insert document.uri (streamPosToOffsetDocumentPos position -KTxt2.blockStartEnd.length) text)))
					((objectWith [type "insertAfter"] text position)
						(makeEdit
							->edit (edit.insert document.uri (streamPosToOffsetDocumentPos position KTxt2.blockStartEnd.length) text)))
					((objectWith [type "deleteBlock"] start end)
						(makeEdit
							->edit (edit.delete document.uri (new Range (streamPosToOffsetDocumentPos start -KTxt2.blockStartEnd.length) (streamPosToOffsetDocumentPos end KTxt2.blockStartEnd.length)))))

					((object type "tryFullAutoConvert")
						(let [fullConverted (KTxt2.tryFullAutoConvert document.fileName Main.config.conversions)]
							(makeEdit
								->edit (edit.replace document.uri (let [fullText (document.getText)] (new Range (document.positionAt 0) (document.positionAt (- fullText.length 1)))) fullConverted))))
					((objectWith [type "tryAutoConvert"] source output outputStart outputEnd)
						(let [[base sourceExt outputExt _] (document.fileName.split ".")
								conversions
									(KTxt2.validConversions Main.config.conversions "${base}.${sourceExt}" "${base}.${outputExt}" source)]
							(if (> (Lambda.count conversions) 0)
									(let [overwrite (if output "" "Overwrite")
											chosenConversion (if (= 1 (Lambda.count conversions)) (first (collect (conversions.iterator))) null)]
										(withValueOrQuickPick overwrite ["Overwrite" "Cancel"]
											(when (= "Overwrite" overwrite)
												(withValueOrQuickPickMap chosenConversion conversions
													(whenLet [converted
																	(try (chosenConversion.convert source)
																		(catch [e] (errorMessage "Conversion error: $e") null))]
														(makeEdit
															->edit (edit.replace document.uri (rangeFromStartEnd outputStart outputEnd) converted)))))))
								(errorMessage "No automatic conversions are valid for the chosen block."))))
					((object type "export")
						(exportSourceAndOutputFiles document))
					((object type "find")
						(awaitLet [str (inputBox)]
							(webviewPanel.webview.postMessage (object type "find" text str))))
					(otherwise
						(errorMessage "bad message $e from KTxt2Editor"))))

		(webviewPanel.onDidChangeViewState
			->e {
				(unless e.webviewPanel.visible (exportSourceAndOutputFiles document))
			})						

		(updateWebview))
	null)

(method :String htmlForWebview [:Webview webview]
    (let [monacoDir
				(Uri.joinPath (Uri.parse this.context.extensionUri) "node_modules" "monaco-editor" "min" "vs")
			requireConfigDir
				(webview.asWebviewUri monacoDir)
			cssUri
				(webview.asWebviewUri (Uri.joinPath monacoDir "editor" "editor.main.css"))
			monacoLoaderUri
				(webview.asWebviewUri (Uri.joinPath monacoDir "loader.js"))
			monacoEditorNlsUri
				(webview.asWebviewUri (Uri.joinPath monacoDir "editor" "editor.main.nls.js"))
			monacoEditorUri
				(webview.asWebviewUri (Uri.joinPath monacoDir "editor" "editor.main.js"))
			ktxt2EditorScriptUri
                (webview.asWebviewUri (Uri.joinPath (Uri.parse this.context.extensionUri) "bin" "ktxt2editor.js"))]
        "<!DOCTYPE html>
			<html>
			<head>
				<meta charset=\"UTF-8\">
				<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
				<link
					rel=\"stylesheet\"
					data-name=\"vs/editor/editor.main\"
					href=\"${cssUri}\" />
			</head>
			<body>	
				<script src=\"${ktxt2EditorScriptUri}\"></script>
				<script>
					var require = { paths: { vs: \"${requireConfigDir}\" } };
				</script>
				<script src=\"${monacoLoaderUri}\"></script>
				<script src=\"${monacoEditorNlsUri}\"></script>
				<script src=\"${monacoEditorUri}\"></script>
			</body>
			</html>"))

(function exportSourceAndOutputFiles [document]
    (let [:String ktxt2FullFilename document.fileName
			[sourceText outputText] (KTxt2.extractFileContents (Stream.fromFile ktxt2FullFilename) ->message (errorMessage message))
            ktxt2Directory (ktxt2FullFilename.directory)
            ktxt2Filename (ktxt2FullFilename.withoutDirectory)
            [baseFilename sourceExt outputExt ktxt2Ext] (ktxt2Filename.split ".")
            sourceFilename (joinPath ktxt2Directory "${baseFilename}.${sourceExt}")
            outputFilename (joinPath ktxt2Directory "${baseFilename}.${outputExt}")]
        (File.saveContent sourceFilename sourceText)
		(File.saveContent outputFilename outputText)
		(print "Export for $(document.fileName.withoutDirectory) succeeded.")))