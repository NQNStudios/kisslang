(var &mut :VSCodeAPI vscode)
(var &mut :Window window)
(var &mut :Document document)
(var &mut :Element content)
(var &mut :Array<KTxt2Element> ktxt2Elements)

// Because monaco editors are expensive, the editor can't have an infinite number open at a time
(var PAGE_SIZE 24)
(var SCROLL_AMOUNT 18)
(var &mut elementScrollY 0)

(function main []
    (set vscode (EditorExterns.acquireVsCodeApi))
    (set window EditorExterns.window)
    (set document window.document)

    (set Prelude.printStr ->[message]
        (vscode.postMessage (object type "print" text message)))

    (window.addEventListener "message"
        ->:Void event
            (case (the MessageToEditor event.data)
                ((object type "update" text text)
                    (whenMonacoIsAvailable ->(updateContent text))
                    (vscode.setState (object text text)))
                (otherType (throw "bad message $event for KTxt2Editor"))))

   (whenLet [state (the Dynamic (vscode.getState))]
        // Wait to set up the UI until monaco is loaded from the other scripts:
        (whenMonacoIsAvailable ->(updateContent state.text))))

(var MONACO_CHECK_MILLI 100)
(function :Void whenMonacoIsAvailable [:Void->Void doThis]
    (if Lib.global.monaco
            (doThis)
        (window.setTimeout ->(whenMonacoIsAvailable doThis) MONACO_CHECK_MILLI)))

(var &mut :Map<Int,Int> editTimeoutHandles (new Map))
(var EDIT_TIMEOUT_MILLI 2000)
(function :Void addEditTimeout [idx :Void->Void handler]
    (whenLet [activeTimeoutForIndex (dictGet editTimeoutHandles idx)]
        (window.clearTimeout activeTimeoutForIndex))
    (dictSet editTimeoutHandles
        idx
        (window.setTimeout
            ->{
                (editTimeoutHandles.remove idx)
                (handler)
            }
            EDIT_TIMEOUT_MILLI)))

(function monacoEditor [div style content language readOnly :Dynamic->Void onChange]
    (let [:Dynamic e
                (Lib.global.monaco.editor.create div
                    (objectWith
                        [
                            value content
                            lineNumbers "on"
                            scrollBeyondLastLine false
                            theme "vs-dark"
                            minimap (object enabled false)
                            wordWrap true
                        ]
                        language
                        readOnly))
            updateSize
                ->[&opt _] {
                    (div.setAttribute "style" "${style} height: $(e.getContentHeight)px;")
                    (e.layout)
                }]
        (updateSize)
        (e.onDidContentSizeChange updateSize)
        (e.onDidChangeModelContent ->[&opt _] (onChange e))
        e))

    

(function replaceComment [element newText]
    (case element
        ((Comment (object text text start start end end))
            (vscode.postMessage (object type "replace" text newText start start end end)))
        (otherwise (throw "element $element is not a comment"))))

(function insertBlockBeforeBlock [element]
    (case element
        ((Block (object sourceStart position))
            (vscode.postMessage (object type "insertBefore" text "\n${KTxt2.emptyBlock}" position position)))
        (otherwise (throw "element $element is not a block"))))

(function insertBlockAfterBlock [element]
    (case element
        ((Block (object outputEnd position))
            (vscode.postMessage (object type "insertAfter" text "${KTxt2.emptyBlock}\n" position position)))
        (otherwise (throw "element $element is not a block"))))

(function replaceSourceBlock [element newText]
    (case element
        ((Block (object source text sourceStart start sourceEnd end))
            (vscode.postMessage (object type "replace" text newText start start end end)))
        (otherwise (throw "element $element is not a block"))))

(function replaceOutputBlock [element newText]
    (case element
        ((Block (object output text outputStart start outputEnd end))
            (vscode.postMessage (object type "replace" text newText start start end end)))
        (otherwise (throw "element $element is not a block"))))

(function deleteEntireBlock [element]
    (case element
        ((Block (object source text sourceStart start outputEnd end))
            (vscode.postMessage (object type "deleteBlock" start start end end)))
        (otherwise (throw "element $element is not a block"))))

(function changeLockStatus [element newStatus]
    (case element
        ((Block (object sourceEnd start outputStart end))
            (vscode.postMessage (object type "replace" text (if newStatus KTxt2.lockedStart KTxt2.unlockedStart) start start end end)))
        (otherwise (throw "element $element is not a block"))))

(function tryAutoConvert [element]
    (case element
        ((Block (objectWith source output outputStart outputEnd))
            (vscode.postMessage (objectWith [type "tryAutoConvert"] source output outputStart outputEnd)))
        (otherwise (throw "element $element is not a block"))))

(function blockElements [source output locked idx]
    (let [outerDiv (document.createElement "div")
            :js.html.Element sourceDiv (cast (document.createElement "div"))
            :js.html.Element outputDiv (cast (document.createElement "div"))
            convertLink (document.createElement "a")
            xLink (document.createElement "a")
            lockLink (document.createElement "a")
            exportLink (document.createElement "a")
            blockLinkBefore (document.createElement "a")
            blockLinkAfter (document.createElement "a") ]
        (outerDiv.setAttribute "class" "container")
        (outerDiv.setAttribute "style" "display: flex;")

        (set blockLinkBefore.innerHTML "+")
        (blockLinkBefore.addEventListener "click"
            ->(insertBlockBeforeBlock (nth ktxt2Elements idx)))
        (set blockLinkAfter.innerHTML "+")
        (blockLinkAfter.addEventListener "click"
            ->(insertBlockAfterBlock (nth ktxt2Elements idx)))

        (content.appendChild blockLinkBefore)
        (content.appendChild (document.createElement "br"))

        (monacoEditor sourceDiv "width: 50%;" source /* TODO get the real extension of the source file: */ "txt" locked
            ->editor (addEditTimeout idx ->{
                                            (replaceSourceBlock (nth ktxt2Elements idx) (editor.getValue))
                                        }))

        (monacoEditor outputDiv "flex-grow: 1;" output /* TODO get the real extension of the output file: */ "txt" locked
            ->editor (addEditTimeout idx ->{
                                            (replaceOutputBlock (nth ktxt2Elements idx) (editor.getValue))
                                        }))

        // Link that will delete the whole block:
        (set xLink.innerHTML "x")
        (xLink.addEventListener "click"
            ->(deleteEntireBlock (nth ktxt2Elements idx)))
        (unless locked
            (outerDiv.appendChild xLink))

        (outerDiv.appendChild sourceDiv)

        // Link that attempts automatic conversion of the source in a block:
        (unless locked
            (set convertLink.innerHTML ">")
            (convertLink.setAttribute "style" "width: 2ch;")
            (convertLink.addEventListener "click"
                ->(tryAutoConvert (nth ktxt2Elements idx)))
            (outerDiv.appendChild convertLink))

        (outerDiv.appendChild outputDiv)

        (set lockLink.innerHTML (if locked "unlock " "lock "))
        (lockLink.addEventListener "click"
            ->(changeLockStatus (nth ktxt2Elements idx) !locked))
        (outerDiv.appendChild lockLink)
        (set exportLink.innerHTML "export")
        (exportLink.addEventListener "click"
            ->(vscode.postMessage (object type "export")))
        (outerDiv.appendChild exportLink)
        (content.appendChild outerDiv)
        (content.appendChild (document.createElement "br"))
        (content.appendChild blockLinkAfter)

        ))


(var &mut updatingContent false)

(function :Void setScrollY [y]
    (window.scroll
        (object
            left 0
            top y
            behavior INSTANT)))

(function :Void updateContent [&opt text]
    (try
            {
                (set updatingContent true)
                (when content
                    (document.body.removeChild content))
                (set content (document.createElement "div"))
                (document.body.appendChild content)
                (when text (set ktxt2Elements (KTxt2.splitFileElements (Stream.fromString text))))
                (when (< 0 elementScrollY)
                    (let [upLink (document.createElement "a")
                            topLink (document.createElement "a")]
                        (set upLink.innerHTML "^ ")
                        (set topLink.innerHTML "^^^")
                        (upLink.addEventListener "click"
                            ->{
                                (-= elementScrollY SCROLL_AMOUNT)
                                (updateContent)
                                (setScrollY (- document.body.scrollHeight document.documentElement.clientHeight))
                            })
                        (topLink.addEventListener "click"
                            ->{
                                (set elementScrollY 0)
                                (updateContent)
                                (setScrollY 0)
                            })
                        (content.appendChild upLink)
                        (content.appendChild topLink)))
                (doFor [idx element] (.slice (collect (enumerate ktxt2Elements)) elementScrollY (+ elementScrollY PAGE_SIZE))
                    (case element
                        ((Comment (objectWith text))
                            (throw "comments are no longer a feature!"))
                        ((Block (objectWith source output outputLocked))
                            (blockElements source output outputLocked idx))))
                (when (> (- ktxt2Elements.length 1) (+ elementScrollY SCROLL_AMOUNT))
                    (let [downLink (document.createElement "a")
                            bottomLink (document.createElement "a")]
                        (set downLink.innerHTML "v ")
                        (set bottomLink.innerHTML "vvv")
                        (downLink.addEventListener "click"
                            ->{
                                (+= elementScrollY SCROLL_AMOUNT)
                                (updateContent)
                                (setScrollY 0)
                            })
                        (bottomLink.addEventListener "click"
                            ->{
                                (set elementScrollY (- ktxt2Elements.length PAGE_SIZE))
                                (updateContent)
                                (setScrollY (- document.body.scrollHeight document.documentElement.clientHeight))
                            })
                        (content.appendChild downLink)
                        (content.appendChild bottomLink)))
                (set updatingContent false)
            }
        (catch [error] (print "Error updating ktxt2 editor: ${error}"))))

