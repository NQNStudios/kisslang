(var &mut :VSCodeAPI vscode)
(var &mut :Window window)
(var &mut :Document document)
(var &mut :Element content)
(var &mut :Array<KTxt2Element> ktxt2Elements)

(function main []
    (set vscode (EditorExterns.acquireVsCodeApi))
    (set window EditorExterns.window)
    (set document window.document)

    (set Prelude.printStr ->[message]
        (vscode.postMessage (object type "print" text message)))

    (window.addEventListener "message"
        ->:Void event
            (case (the MessageToEditor event.data)
                ((object type "update" text text)
                    (updateContent text)
                    (vscode.setState (object text text)))
                (otherType (throw "bad message $event for KTxt2Editor"))))
    
    (whenLet [state (the Dynamic (vscode.getState))]
        (updateContent state.text)))

(var &mut :Map<Int,Int> editTimeoutHandles (new Map))
(var EDIT_TIMEOUT_MILLI 2000)
(function :Void addEditTimeout [idx :Void->Void handler]
    (whenLet [activeTimeoutForIndex (dictGet editTimeoutHandles idx)]
        (window.clearTimeout activeTimeoutForIndex))
    (dictSet editTimeoutHandles
        idx
        (window.setTimeout
            ->{
                (editTimeoutHandles.remove idx)
                (handler)
            }
            EDIT_TIMEOUT_MILLI)))

(function commentElements [text idx]
    (let [:TextAreaElement p (cast (document.createElement "textarea")) // keeping variable name the same, but it's a textarea not a <p> element
            blockLinkBefore (document.createElement "a")
            blockLinkAfter (document.createElement "a")]
        // Links that allow inserting a block between existing blocks:
        (set blockLinkBefore.innerHTML "+")
        (blockLinkBefore.addEventListener "click"
            ->(insertBlockBeforeComment (nth ktxt2Elements idx)))
        (set blockLinkAfter.innerHTML "+")
        (blockLinkAfter.addEventListener "click"
            ->(insertBlockAfterComment (nth ktxt2Elements idx)))

        // Paragraph displaying and allowing editing the comment
        (set p.value text)
        (set p.rows .length (text.split "\n"))
        (p.setAttribute "class" "block")
        (p.setAttribute "style" "width: 90%;")
        (p.addEventListener "input"
            ->(addEditTimeout idx ->{(p.blur)(replaceComment (nth ktxt2Elements idx) p.value)}))
        (content.appendChild blockLinkBefore)
        (content.appendChild p)
        (content.appendChild blockLinkAfter)))

// This used to turn HTML to plaintext, but with textareas it's no longer needed:
(function toPlaintext [:String text]
    text)

(function replaceComment [element newText]
    (case element
        ((Comment (object text text start start end end))
            (vscode.postMessage (object type "replace" text (toPlaintext newText) start start end end)))
        (otherwise (throw "element $element is not a comment"))))

(function insertBlockBeforeComment [element]
    (case element
        ((Comment (object start position))
            (vscode.postMessage (object type "insert" text "\n${KTxt2.emptyBlock}" position position)))
        (otherwise (throw "element $element is not a comment"))))

(function insertBlockAfterComment [element]
    (case element
        ((Comment (object end position))
            (vscode.postMessage (object type "insert" text "${KTxt2.emptyBlock}\n" position position)))
        (otherwise (throw "element $element is not a comment"))))

(function replaceSourceBlock [element newText]
    (case element
        ((Block (object source text sourceStart start sourceEnd end))
            (vscode.postMessage (object type "replace" text (toPlaintext newText) start start end end)))
        (otherwise (throw "element $element is not a block"))))

(function replaceOutputBlock [element newText]
    (case element
        ((Block (object output text outputStart start outputEnd end))
            (vscode.postMessage (object type "replace" text (toPlaintext newText) start start end end)))
        (otherwise (throw "element $element is not a block"))))

(function deleteEntireBlock [element]
    (case element
        ((Block (object source text sourceStart start outputEnd end))
            (vscode.postMessage (object type "deleteBlock" start start end end)))
        (otherwise (throw "element $element is not a block"))))

(function changeLockStatus [element newStatus]
    (case element
        ((Block (object sourceEnd start outputStart end))
            (vscode.postMessage (object type "replace" text (if newStatus KTxt2.lockedStart KTxt2.unlockedStart) start start end end)))
        (otherwise (throw "element $element is not a block"))))

(function tryAutoConvert [element]
    (case element
        ((Block (objectWith source output outputStart outputEnd))
            (vscode.postMessage (objectWith [type "tryAutoConvert"] source output outputStart outputEnd)))
        (otherwise (throw "element $element is not a block"))))

(function blockElements [source output locked idx]
    (let [outerDiv (document.createElement "div")
            :TextAreaElement sourceDiv (cast (document.createElement "textarea")) // leaving variable names the same, but these are not divs
            :TextAreaElement outputDiv (cast (document.createElement "textarea"))
            convertLink (document.createElement "a")
            xLink (document.createElement "a")
            lockLink (document.createElement "a")
            exportLink (document.createElement "a")]
        (outerDiv.setAttribute "class" "container")
        (outerDiv.setAttribute "style" "display: flex;")
        (sourceDiv.setAttribute "style" "width: 50%;")
        (sourceDiv.setAttribute "class" "block")
        (sourceDiv.addEventListener "input"
            ->(addEditTimeout idx ->{(sourceDiv.blur)(replaceSourceBlock (nth ktxt2Elements idx) sourceDiv.value)}))
        (set sourceDiv.value source)
        (set sourceDiv.rows .length (source.split "\n"))
        (outputDiv.setAttribute "style" "flex-grow: 1;")
        (outputDiv.setAttribute "class" "block")
        (outputDiv.addEventListener "input"
            ->(addEditTimeout idx ->{(outputDiv.blur)(replaceOutputBlock (nth ktxt2Elements idx) outputDiv.value)}))
        (set outputDiv.value output)
        (set outputDiv.rows .length (output.split "\n"))

        // Link that will delete the whole block:
        (set xLink.innerHTML "x")
        (xLink.addEventListener "click"
            ->(deleteEntireBlock (nth ktxt2Elements idx)))
        (unless locked
            (outerDiv.appendChild xLink))

        (outerDiv.appendChild sourceDiv)

        // Link that attempts automatic conversion of the source in a block:
        (unless locked
            (set convertLink.innerHTML "->")
            (convertLink.addEventListener "click"
                ->(tryAutoConvert (nth ktxt2Elements idx)))
            (outerDiv.appendChild convertLink))
        (when locked
            (set sourceDiv.disabled true)
            (set outputDiv.disabled true))

        (outerDiv.appendChild outputDiv)

        (set lockLink.innerHTML (if locked "unlock" "lock"))
        (lockLink.addEventListener "click"
            ->(changeLockStatus (nth ktxt2Elements idx) !locked))
        (outerDiv.appendChild lockLink)
        (set exportLink.innerHTML "export")
        (exportLink.addEventListener "click"
            ->(vscode.postMessage (object type "export")))
        (outerDiv.appendChild exportLink)

        (content.appendChild outerDiv)))

(function :Void updateContent [text]
    (try
            {
                (when content
                    (document.body.removeChild content))
                (set content (document.createElement "div"))
                (document.body.appendChild content)
                (set ktxt2Elements (KTxt2.splitFileElements (Stream.fromString text)))
                (doFor [idx element] (enumerate ktxt2Elements)
                    (case element
                        ((Comment (objectWith text))
                            (commentElements text idx))
                        ((Block (objectWith source output outputLocked))
                            (blockElements source output outputLocked idx))))
            }
        (catch [error] (print "Error updating ktxt2 editor: ${error}"))))

