(loadFrom "kiss-vscode" "src/Util.kiss")

// ui
(defAlias &ident activeTextEditor Vscode.window.activeTextEditor)

/**
 * Helper functions
 */
(function selectedText []
    (if (and activeTextEditor activeTextEditor.selection)
            (let [document
                        activeTextEditor.document
                    selection
                        activeTextEditor.selection
                    range (new Range selection.start selection.end)]
                (document.getText range))
        ""))

(function insertAt [:vscode.Position pos text]
    (activeTextEditor.edit
        (lambda [e]
            (e.insert pos text))))

(function insert [text]
    (insertAt activeTextEditor.selection.active text))

/**
 * State
 */

(var :Map<String,Command> commands (new Map))
(var :KeyShortcutHandler<String> shortcutHandler (new KeyShortcutHandler))

(var &mut :String lastCommand null)
(var parser (new Parser))
(var interp (new Interp))
(var &mut :String extensionPath "")

/**
 * Functionality
 */

// TODO pass macros and aliases from Util.kiss to the KissState of "eval kiss expression"
(function :Dynamic evalString [:String kissStr]
    (try
            (interp.execute
                (parser.parseString
                    (Prelude.convertToHScript kissStr)))
        (catch [e]
            (errorMessage "Error `${e}` from $kissStr")
            null)))

(function :Void runCommand [&opt command] (_runCommand command))

(defMacro _runCommandFunc [commandName]
    `(let [command ,commandName]
        (set lastCommand command)
        (try ((dictGet commands command) inputText)
            (catch [error] (errorMessage "error from ${command}: $error") (return)))))

(function :Void _runCommand [&opt command inputText]
    (unless inputText (set inputText (selectedText)))
    (if command
            (_runCommandFunc command)
            (awaitLet [chosenCommand (quickPick (collect (commands.keys)))]
                (when chosenCommand
                    (_runCommandFunc chosenCommand)))))

(function :Void runLastCommand [&opt _]
    (if lastCommand
            (runCommand lastCommand)
        (errorMessage "No Kiss command was run previously.")))

(var &mut :vscode.WebviewPanel shortcutPanel null)
(var &mut :vscode.TextDocument documentBeforeShortcut null)
(var &mut :String selectedTextBeforeShortcut null)
(var &mut :Disposable keyListener null)

(function :Void closeShortcutPanel []
    (set documentBeforeShortcut null)
    (set selectedTextBeforeShortcut null)
    (when shortcutPanel
        (keyListener.dispose)
        (shortcutPanel.dispose)
        (set shortcutPanel null)))

(function :Void runChosenCommand [:String command]
    (if documentBeforeShortcut
            (awaitLet [_ (Vscode.window.showTextDocument documentBeforeShortcut)]
                (_runCommand command selectedTextBeforeShortcut))
        (_runCommand command selectedTextBeforeShortcut)))

(function :Void showShortcutPanel [:PrefixMap<String> prefixMap]
    // Preserve the selected text and focused document before opening the webview:
    (whenLet [text (selectedText)] (set selectedTextBeforeShortcut text))
    (when activeTextEditor
        (set documentBeforeShortcut activeTextEditor.document))

    (closeShortcutPanel)
    (set shortcutPanel (Vscode.window.createWebviewPanel 
                                "kissShortcut"
                                "Kiss Shortcuts"
                                vscode.ViewColumn.Two
                                (object
                                    enableScripts true)))
    (set keyListener (shortcutPanel.webview.onDidReceiveMessage ->:Void key (shortcutHandler.handleKey (the String key))))
    (set shortcutPanel.webview.html (shortcutPanelHtml prefixMap))
    (shortcutPanel.webview.postMessage (object command "focus")))

(function shortcutPanelHtml [:PrefixMap<String> prefixMap]
    (let [&mut unusedKeys "abcdefghijklmnopqrstuvwxyz1234567890-/"
            shortcutParagraphs
                (for =>key shortcutKey prefixMap
                    (set unusedKeys (unusedKeys.replace (key.toLowerCase) ""))
                    "<p><strong>${key}</strong> - $(case shortcutKey
                                    ((Prefix innerMap)
                                        "$(Lambda.count innerMap) shortcuts")
                                    ((Final command)
                                        command)
                                    (otherwise))</p>")]
        "<!DOCTYPE html>
        <html lang=\"en\">
            <head>
                <meta charset=\"UTF-8\">
                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
                <title>Kiss Shortcuts</title>
            </head>
            <body>
                $(shortcutParagraphs.join "")
                <p>unused: ${unusedKeys}</p>
                <script>
                    const vscode = acquireVsCodeApi();
                    window.addEventListener('message', function(event) {
                        var message = event.data;

                        switch (message.command) {
                            case 'focus':
                                window.focus();
                                break;
                        }
                    });
                    window.addEventListener('keydown', function (e) {
                        vscode.postMessage(e.key);
                    });
                </script>
            </body>
        </html>"))

(function :Void runKeyboardShortcut [&opt _]
    (shortcutHandler.start))

// Register a VSCode command (built-in, or from an extension)
(function registerExistingCommand [description command]
    (registerCommand description (lambda :Void [&opt _] (executeCommand command))))

(loadFrom "kiss-vscode" "src/commands/KissTools.kiss")
(loadFrom "kiss-vscode" "src/commands/ExtensionTools.kiss")
(loadFrom "kiss-vscode" "src/commands/KTxt2Tools.kiss")

// Provided from Main.kiss via (set):
(var &mut :Command tryLoadConfig)

(function :Void registerBuiltins [&opt leaderKeys]
    // Set up the KeyShortcutHandler
    (set shortcutHandler.cancelKey "Escape")
    (set shortcutHandler.onSelectPrefixMap showShortcutPanel)
    (set shortcutHandler.onSelectItem runChosenCommand)
    (set shortcutHandler.onFinishOrCancel closeShortcutPanel)
    (set shortcutHandler.onBadKey ->:Void [key map] (warningMessage "$key is not mapped to a shortcut in $map"))
    (set shortcutHandler.onBadShortcut ->:Void [key otherKey] (warningMessage "$key conflicts with $otherKey"))

    (unless leaderKeys (set leaderKeys ""))
    (let [prefix "Kiss-VSCode:$(if leaderKeys " [${leaderKeys}]" "")"
            ktxt2Prefix "KTxt2:$(if leaderKeys " [${leaderKeys}]" "")"]
        // In Main.kiss:
        (registerCommand "${prefix} [r]eload Config.kiss" tryLoadConfig)
        // In this file:
        (registerCommand "${prefix} [q]uickPick and run a command" runCommand)
        (registerCommand "${prefix} Re-run last command" runLastCommand)
        (registerCommand "${prefix} Run a keyboard [s]hortcut command" runKeyboardShortcut)
        // KissTools.kiss:
        (registerCommand "${prefix} [e]valuate and print an expression" evalAndPrint)
        (registerCommand "${prefix} create [n]ew kiss class" newKissClass)
        (registerCommand "${prefix} open corresponding .kiss/.hx [f]ile" showCorrespondingFile)
        // ExtensionTools.kiss:
        (registerCommand "${prefix} [u]pdate Kiss-VSCode" updateKissVscode)
        (registerCommand "${prefix} [t]est and [u]pdate Kiss-VSCode" testAndUpdateKissVscode)
        // KTxt2.kiss:
        (registerCommand "${ktxt2Prefix} [i]mport input file" importKTxt2InputFile))
        
        // Show a warning when editing a document that is managed by a ktxt2 file
        (Vscode.workspace.onDidChangeTextDocument
            ->e
                (let [f e.document.fileName
                        dir (FileSystem.readDirectory (f.directory))]
                    (unless (f.endsWith "ktxt2")
                        (doFor otherF dir
                            (whenLet [(Some _) (indexOf otherF (.withoutDirectory (f.withoutExtension)))
                                        (Some _) (indexOf otherF (f.extension))
                                        true (otherF.endsWith ".ktxt2")]
                                (errorMessage "Editing file $(f.withoutDirectory) which is managed by $(otherF.withoutDirectory)")))))))

// TODO standardize this with KissInterp
(function :Void prepareInterp []
    (set Prelude.printStr ->s (infoMessage s))
    (interp.variables.set "kiss" 
        (object
            Prelude
                Prelude))
            //interp.variables.set("Helpers", Helpers);
    (interp.variables.set "Prelude" Prelude)
    (interp.variables.set "Lambda" Lambda)
    (interp.variables.set "Vscode" Vscode)
    // TODO for some reason, (interp.variables.set "Std" Std) doesn't capture
    // some static functions, like parseInt. So this kludgy bit is necessary:
    (interp.variables.set "Std"
        (object
            parseInt Std.parseInt
            string Std.string
            random Std.random
            int Std.int)))

// Way to more forgivingly get long text inputs
(function :Promise<String> inputEditor [:String filename :String prompt]
    (let [previousEditor activeTextEditor
            tempFile (joinPath extensionPath "temp" filename)
            uri (if (FileSystem.exists tempFile)
                        (Uri.parse "file:$tempFile")
                    (Uri.parse "untitled:$tempFile"))]
        (new Promise
            ->[resolve reject]
                (awaitLet [doc (openTextDocument uri)
                            _ (doc.save)
                            editor (showTextDocument doc)]
                    (print "Enter ${prompt}, then save and close this editor.")
                    (let [&mut :Disposable closeEvent null]
                        (set closeEvent
                            (Vscode.workspace.onDidCloseTextDocument
                                ->closedDoc
                                    (when (= closedDoc.fileName doc.fileName)
                                        (closeEvent.dispose)
                                        (awaitLet [_ (showTextDocument previousEditor.document)]
                                            (if editor.document.isDirty (let [error "Input editor for $prompt was closed without saving."] (warningMessage error) (reject error)) (resolve (editor.document.getText))))))))))))

(function registerCommand [description :Command command]
    (dictSet commands description command)
    (shortcutHandler.registerItem description description))

(#unless test
    (var :Array<KTxt2Conversion> conversions [])

    (function registerConversion [:KTxt2Conversion conversion] (conversions.push conversion)))


(function quickWebview []
    (let [dom (new JSDOM "<!DOCTYPE html><p>Hello world</p>")
            document dom.window.document]
        document))