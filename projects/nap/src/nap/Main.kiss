(defun :Void main []
    ~(Lib.evalBoolExp "true" [])
    ~(Lib.evalBoolExp "false" [])
    ~(Lib.evalBoolExp "flag" [])
    ~(Lib.evalBoolExp "flag" ["flag"])
    ~(Lib.evalBoolExp "(and flag false)" ["flag"])
    ~(Lib.evalBoolExp "(or flag otherFlag)" ["otherFlag"])
    //trace(error);
    (let [archiveDir
                // TODO optional flags like --cache will complicate this way of handling args
                (.shift (Sys.args))
            archive
                (new Archive archiveDir)]
        // TODO run a front-end -- could be a test frontend that sends predetermined list of events
        (archive.process)))
    
    
    
    /*
    (let [e (new Entry "name")]
        (dictSet e.components "f" [5])
        (dictSet e.components "b" [(object c "d")])
        (let [s (haxe.Json.stringify e)
                :Entry e2 (haxe.Json.parse s)]
            // can't call Entry methods on e2
            (print s))))
            */