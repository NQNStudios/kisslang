(defMacroVar maxInt 1000000000)
(defMacroVar maxStringLength 20)
(defMacroVar maxExps 4)
(defMacroVar maxDepth 13)

(defAlias &ident nd (+ 1 macroDepth))

(defMacroFunction _macroList [func length]
    (for _ (range length) (func)))

(defMacro macroRepeat [exp length]
    `(begin ,@(_macroList ->{exp} (eval length))))

(defMacroFunction _randomLengthMacroList [func]
    (_macroList func (+ 2 (random (- maxExps 2)))))

(defMacroFunction _randomLetterString []
    (ReaderExp.StrExp
        (apply +
            (for _ (range (+ 1 (random (- maxStringLength 1))))
                (chooseRandom (.split "abcdefghijklmnopqrstuvwxyz" ""))))))

(defMacroFunction _randomInt []
    (symbol (Std.string (random maxInt))))

(defMacroFunction _randomFloat []
    (symbol (Std.string (+ (random maxInt) (/ 1 (random maxInt))))))

(defMacroFunction _randomFalsyExp [macroDepth]
    ((chooseRandom
        (concat
            [
                // null in conditionals is problematic in C#
                (#if !cs ->{`null} ->{`false})
                ->{`false}
                ->{`""}
                ->{`[]}
            ]
            (if (< macroDepth maxDepth)
                    [
                        ->{`(or ,@(_randomLengthMacroList ->(_randomFalsyExp nd)))}
                        ->{`(and
                                ,@(_randomLengthMacroList ->(_randomUncertainExp nd))
                                ,(_randomFalsyExp nd)
                                ,@(_randomLengthMacroList ->(_randomUncertainExp nd)))}
                    ]
                [])))))
(defMacro randomFalsyExp []
    (printExp (_randomFalsyExp 0) "Falsy"))

(defMacroFunction _randomTruthyExp [macroDepth]
    ((chooseRandom
        (concat
            [
                ->{`true}
                ->(_randomLetterString)
                ->(_randomInt)
                ->(_randomFloat)
            ]
            (if (< macroDepth maxDepth)
                    [
                        ->{`[,@(_randomLengthMacroList _randomLetterString)]}
                        ->{`[,@(_randomLengthMacroList _randomInt)]}
                        ->{`[,@(_randomLengthMacroList _randomFloat)]}
                        ->{`(and ,@(_randomLengthMacroList ->(_randomTruthyExp nd)))}
                        ->{`(or 
                                ,@(_randomLengthMacroList ->(_randomUncertainExp nd))
                                ,(_randomTruthyExp nd)
                                ,@(_randomLengthMacroList ->(_randomUncertainExp nd)))}
                    ]
                [])))))
(defMacro randomTruthyExp []
    (printExp (_randomTruthyExp 0) "Truthy"))

(defMacroFunction _randomUncertainExp [macroDepth]
    ((chooseRandom
        [
            ->(_randomFalsyExp macroDepth)
            ->(_randomTruthyExp macroDepth)
        ])))

(function _testTruthy []
    // Expressions that have failed in the past:
    (Assert.isTrue ?(or false (and 642565506 905012177) "vaxricnakvc" [431724544 383128908 868813810] 169132392 "" ["ftmlkbdx" "vdaziji" "zm"]))
    // 10 new expressions:
    (macroRepeat (Assert.isTrue ?(randomTruthyExp)) 10))

(function _testFalsy []
    // 10 new expressions:
    (macroRepeat (Assert.isFalse ?(randomFalsyExp)) 10))