(defreadermacro &start "!" [stream] 
    (let [line (stream.expect "a string line" (lambda [] (stream.takeLine)))]
        (ReaderExp.StrExp line)))

(defun myLine []
    !String that takes the rest of the line
    )

(defun myBool []
    (begin !false))

(defalias pluppers +)
(defalias fluffers 5)
(defalias buffers 4)

(defvar mySum (pluppers fluffers buffers))

// Read b c directly as strings
(defreadermacro ["b" "c"] [stream] #|ReaderExp.StrExp(stream.expect("b, or c", function () stream.takeChars(1)))|#)

(defvar str1 b)
(defvar str2 c)

// rassert asserts the next expression without parens
(defreadermacro "rassert" [stream] `(assert ,(read stream)))

(defun _testQuasiquoteMacro []
    rassert [5]
    rassert b
    rassert fluffers
    (Assert.pass))